{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":""},{"location":"#publication","title":"Publication","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Environmental%20Building%20Design/","title":"W1: What is an \u201cenvironmental\u201d building","text":""},{"location":"Environmental%20Building%20Design/#1-design-energy-code-ashrae-standard-901","title":"1. Design Energy Code: ASHRAE Standard 90.1","text":""},{"location":"Environmental%20Building%20Design/#history","title":"History","text":"<ul> <li>Originally published in 1975, under the name Energy Conservation in New Building Design, as the first national energy code.</li> <li>Developed after the 1973 oil crisis, which brought about significant petroleum shortages and raised prices.</li> <li>In 1989: the ASHRAE 90 was separated into two standards, one for commercial buildings and the other for low-rise residential buildings.</li> <li>Before this standard, there was less awareness about energy consumption in buildings, and this set a new way of thinking.</li> <li>Later editions up to the 90.1-2016 have been shown to have reduced the energy used by a typical building that conforms to the standard by about 50%, based on research led by the Pacific Northwest National Laboratory (see image on right).</li> <li>The standard provides minimum requirements for energy-efficient design of most buildings and has been the benchmark for commercial building energy codes in the US and a basis for codes around the world for more than 35 years.</li> </ul>"},{"location":"Environmental%20Building%20Design/#what-problem","title":"What Problem","text":"<ul> <li>Energy Consumption ASHRAE deals with the issue of excess energy consumption in a building, and acts as the minimum law required energy performance metric before a building can be allowed to be built in the US.</li> <li>Energy Cost Reducing Energy consumption, beyond being a code requirement, is a way of reducing energy cost for owners, which therefore becomes another interest of the standard.</li> <li>CO2 Emissions Finally, the driving force behind the implementation of ASHRAE as code is to conserve the environment, measured by magnitude of the carbon footprint of buildings.</li> <li>Comprehensive Design ASHRAE is invested in encouraging comprehensive, multi-scaled design practice between different design professionals that maximizes efficiencies and capitalizes on opportunities</li> </ul>"},{"location":"Environmental%20Building%20Design/#how-does-it-work","title":"How Does It Work","text":"<ul> <li>Enforcement This is enforced by states or other local government jurisdictions. Those local governments decide which version of ASHRAE's standards a building must meet to be compliant. And the burden falls on developers, designers, and contractors. Pass/Fail Outcome.</li> <li>Beyond-Code This is really just the baseline, and many more progressive jurisdictions use this just as the floor to build higher-standard requirements or incentives.</li> <li>If you fail, you can prove that your building meets performance standards in lieu of the other standards.</li> </ul>"},{"location":"Environmental%20Building%20Design/#2-building-energy-rating-energy-star","title":"2. Building Energy Rating: Energy Star","text":""},{"location":"Environmental%20Building%20Design/#history_1","title":"History","text":"<ul> <li> <p>EPA (Environmental Protection Agency) and DoE (Department of Energy) started the program in 1992 under the Clean Air Act</p> </li> <li> <p>The program is increasingly consumer oriented over the year</p> </li> </ul>"},{"location":"Environmental%20Building%20Design/#what-problem_1","title":"What Problem","text":"<ul> <li>Help businesses identify economical means and method to reduce energy consumption</li> <li>Operational cost contained to the scale and scope of building</li> <li>Measure resources and waste, include greenhouse gas emission, water use, and waste material</li> </ul>"},{"location":"Environmental%20Building%20Design/#how-does-it-work_1","title":"How Does It Work","text":"<ul> <li>Produce Scale Metrics</li> <li>Certified products (75 in total) including light bulbs, personal computers, etc. to provide a comparable metrics to the consumers</li> <li>Commercial building scale metrics </li> <li>Recycled, composted, donated/reused, disposed</li> <li>Statistical performance models based on building size, occupancy, location, number of PCs, etc. with results ranked.</li> <li>enclosure </li> <li>Heating and cooling</li> <li>Water management system (internal/external use)</li> </ul>"},{"location":"Environmental%20Building%20Design/#3-environmental-usgbc-leed","title":"3. Environmental: USGBC LEED","text":""},{"location":"Environmental%20Building%20Design/#history_2","title":"History","text":""},{"location":"Environmental%20Building%20Design/#what-problem_2","title":"What Problem","text":"<ul> <li>Offers a solution or target for defining what a green building is. Helps with advertising and perceptions for renters, prospective buyers, added real estate cost, etc.</li> <li>Green Building Certification - Largely voluntary however it is mandated by some locations, governments, and clients. Can act as a reward system through tax credits or other real estate benefits (such as subsidies or rewards)</li> <li>Certification levels: Certified, Silver, Gold , Platinum . Based on points levels achieved from a checklist</li> <li>There are multiple paths to achieve certification and the system allows some flexibility above achieving all of the \u2018prerequisites\u2019 or minimum mandatory requirements.</li> <li>Diversified collection of rating systems for development of many scales and project types. New Construction, Operations and Maintenance, Core and Shell, Schools, Interiors, and a growing collection of project types - neighborhoods. Note O&amp;M is for existing buildings so works for renovations</li> <li>Dovetails with other systems in the USGBC environment, like WELL certification</li> </ul> <p>Benefits</p> <ul> <li>System has developed to increase difficulty over time, so that LEED v4.1 is now more stringent than its predecessors.</li> <li>Includes a system of pilot credits and innovation credits for incorporating new ideas, concepts, and solutions outside of the \u201cchecklist\u201d</li> <li>Has improved environmentally literacy of the building industry to introduce concepts like VOCs, EPD, HPDs. For example, this solves stagnation or plateaus in building performance and perceptions of what a sustainable building can be.</li> </ul>"},{"location":"Environmental%20Building%20Design/#how-does-it-work_2","title":"How Does It Work","text":"<p>LEED for new buildings: voluntary - can be mandated. It is a point scoring system for certification of a project.</p> <ul> <li>Preparation for LEED certification Meeting minimum requirements, involvement of all team members and achieving effectiveness in cost and environmental performance. In particular, evaluation is made in the following five green design categories:</li> <li>Sustainable sites</li> <li>Water efficiency</li> <li>Energy and atmosphere</li> <li>Materials and resources</li> <li> <p>Indoor environmental quality.</p> </li> <li> <p>Process of LEED certification</p> </li> <li>Step 1: Registration of the project </li> <li>Step 2: Submitting all the required documentation </li> <li>Step 3: Submission for certification </li> <li>Step 4: Preliminary ( technical advice) and final reviews( projects final score and certification) </li> <li> <p>Step 5: Performance feedback : Implementation of performance measurement and creating performance feedback mechanisms.</p> </li> <li> <p>4 levels of certification; Certified, silver, gold , platinum</p> </li> </ul>"},{"location":"Environmental%20Building%20Design/#4-design-passive-house","title":"4. Design: Passive House","text":""},{"location":"Environmental%20Building%20Design/#history_3","title":"History","text":"<p>The movement of passive buildings is a response to the oil embargo of 1973 when oil prices tripled resulting to an energy crisis. This resulted in a group engineers from the University of Illinois into designing the Lo-Cal house three years later. The goal is to reduce energy losses and overloads.</p> <p>By the 1980s a full passive house movements was launched in North America. Germans refined the concept and took over as leaders of the movement.</p> <p>Katrin Klingenberg designed the very first building back in 2003 in the USA. This was the first time that a building met passive building energy standards. Her intention is to promote affordable single family housing units. She is the co-founder of the Passive House institute in the US. By 2016, 240 people passive buildings have had come to light.</p> <p>Source: https://www.eesi.org/</p>"},{"location":"Environmental%20Building%20Design/#what-problem_3","title":"What Problem","text":""},{"location":"Environmental%20Building%20Design/#how-does-it-work_3","title":"How Does It Work","text":"<p>Passive House in cool temperate climates like those across much of North America and Europe, the Standard is international, remaining both applicable and economically feasible in almost all inhabited climates of the globe.</p> <p></p> <p>key elements: windows/insulation/ventilation Installing windows in the insulation layer minimizes thermal bridges; extending insulation over part of the frame reduces heat losses. Installation cross sections in solid and timber frame walls.</p>"},{"location":"Environmental%20Building%20Design/#5-climate-architecture-2030","title":"5. Climate: Architecture 2030","text":""},{"location":"Environmental%20Building%20Design/#history_4","title":"History","text":"<ul> <li> <p>2002: Established as a non-profit research and advocacy group</p> </li> <li> <ul> <li>Mission: transform the built environment from being a major contributor of greenhouse gas emissions to a central solution to climate and energy crises</li> </ul> </li> <li> <p>January 2006: Developed and issued the 2030 Challenge</p> </li> <li> <ul> <li>Challenge inspired \"the zero emissions movement in the global building sector and has since been adopted by architectural  design firms, states, cities, counties, the American Institute of  Architects (AIA), International Union of Architects, US Conference of Mayors, and the China Accord\"</li> </ul> </li> <li> <p>July 2021: CEO and founder Edward Mazria and COO Vincent Martinez deem that 2030 is too late, instead urging that all new buildings and major renovations be designed as carbon neutral</p> </li> </ul>"},{"location":"Environmental%20Building%20Design/#what-problem_4","title":"What Problem","text":"<p>Carbon impacts increasingly threaten our well-being. Buildings are the major source of demand for energy and materials that produce by-product greenhouse gases (GHG). </p> <p>The urban built environment is responsible for 75% of annual global GHG emissions: buildings alone account for 39%. The 2030 Challenges focus on energy and greenhouse gas emission reductions in the built environment \u2013 for individual buildings, districts and cities, and building products.</p> <p>The 2030 Challenge for Planning \u2013 This Challenge is the goal set for the 2030 Districts Network, a membership of 23 private-sector-led, high performance urban building districts across North America. 2030 Districts are led by the private sector, with local building industry leaders, community groups and government to achieve significant energy, water, and emissions reductions.</p> <p>The 2030 Challenge for Embodied Carbon \u2013 This Challenge, originally the 2030 Challenge for Products, spawned the Carbon Leadership Community (previously the Embodied Carbon Network), which now has over 5,400 members from 2650 companies and organizations worldwide, spanning the construction industry from both the private sector and public sector. Architecture 2030 and the Network collaborated to create the Carbon Smart Materials Palette \u2013 an attribute-based approach to embodied carbon emissions reductions for major building elements that will guide building design and construction, and government procurement policies.</p>"},{"location":"Environmental%20Building%20Design/#how-does-it-work_4","title":"How Does It Work","text":"<p>Policy Architecture 2030 partners with policymakers from local governments and stakeholders across the U.S. and international markets to analyze and accelerate the adoption of these critical ZNC policies. </p> <p>Education Architecture 2030 is committed to empowering educators to shape the next generation of architect by providing educational content, tools, resources, competitions, and programs.</p> <p>Collaboration Architecture 2030 has partnered with industry organizations, member-based NGO\u2019s, academic institutions, city networks, and private sector leaders to advance the decarbonization of the built environment at scale.</p>"},{"location":"Environmental%20Building%20Design/#6-ecology-living-building-challenge","title":"6. Ecology: Living Building Challenge","text":""},{"location":"Environmental%20Building%20Design/#history_5","title":"History","text":"<ul> <li>Idea emerged in mid-1990s during an effort to produce the most advanced sustainable design project in the world: the EpiCenter in Bozeman, Montana.</li> <li>Sponsored the creation of the Packard Matrix in 2000, a system to assess economic and environmental impacts of various building certification programs; ultimately deemed Living Building the most effective choice.</li> <li>In 2011 the organization became the International Living Future Institute (ILFI), and adopted \"a mission to lead the transformation to a world that is socially just, culturally rich and ecologically restorative.\"</li> <li>As of 2019, 105 projects have been certified and well over 500 have registered, representing over a dozen building types in nearly every climate zone on the planet.</li> <li>The Challenge has begun to move from proving that Living Buildings are possible to scaling the program to new levels, and to new types and sizes of projects.</li> </ul>"},{"location":"Environmental%20Building%20Design/#what-problem_5","title":"What Problem","text":"<p>Over the last thirty years, green building has grown to become the most important and progressive trend in the building industry. There have been huge steps forward in the design, construction and operation of buildings, and yet when compared with the rate of change required to avoid the worst effects of climate change and other global environmental challenges, our progress can no longer be incremental and barely recordable.</p>"},{"location":"Environmental%20Building%20Design/#how-does-it-work_5","title":"How Does It Work","text":"<p>Two Principles</p> <ol> <li>Living Building Challenge compliance is based on actual, rather than modeled or anticipated, performance. Projects must be operational for at least twelve consecutive months prior to audit to verify Imperative compliance.</li> <li>All Living Building Challenge projects must be holistic\u2014addressing aspects of all seven Petals through the Core Imperatives.</li> </ol>"},{"location":"Environmental%20Building%20Design/#7-well-building-standard","title":"7. WELL Building Standard","text":"<p>The WELL Building Standard is a vehicle for buildings and organizations to deliver more thoughtful and intentional spaces that enhance human health and well-being. Backed by the latest scientific research, WELL includes strategies that aim to advance health by setting performance standards for design interventions, operational protocols and policies and a commitment to fostering a culture of health and well-being. Built on the pioneering foundation of the first version of the WELL Building Standard (WELL v1), WELL v2 draws expertise from thousands of WELL users, practitioners, medical professionals, public health experts and building scientists around the world.</p>"},{"location":"Iris%20%26%20Boston_notes/","title":"Python Notes","text":"<p>\u5c1d\u8bd5\u7528Markdown\u8bb0\u7b14\u8bb0\uff0c\u719f\u6089\u57fa\u672c\u8bed\u6cd5\uff0c\u517b\u6210\u4ee3\u7801\u6027\u4e60\u60ef\uff01</p>"},{"location":"Iris%20%26%20Boston_notes/#iris-boston","title":"Iris &amp; Boston","text":""},{"location":"Iris%20%26%20Boston_notes/#tips","title":"\u5b66\u4e60\u4e2d\u7684\u4e00\u4e9btips\uff1a","text":"<ul> <li>score\u4e0d\u540c\uff0c\u6309\u7167 highest \u6392\u540d\u6765\u5206\u6790data\u4e0emodel\u7684\u5339\u914d\u5ea6\uff0c\u9009\u62e9\u5408\u9002\u7684\u7c7b\u578b\u3001\u6a21\u578b\u548c\u8bc4\u5206\u65b9\u6cd5</li> <li>\u5728\u53c2\u6570\u5316\u5efa\u6a21\u65f6\uff0c\u907f\u514d\u7528 \u4e8c\u7ea7\u53c2\u6570 \u7684\u4e0d\u540c\u7ec4\u5408\u53ef\u4ee5\u63cf\u8ff0\u540c\u4e00\u7ec4\u6a21\u578b\uff0c\u7528 \u4e00\u7ea7\u53c2\u6570 \u66f4\u4f73\uff0c\u9632\u6b62\u7ed3\u679c\u5bf9\u51b2</li> <li>\u8bad\u7ec3\u96c6\u7684\u8bc4\u5206\u63a5\u8fd11.0\uff0c\u800c\u9884\u6d4b\u96c6\u8f83\u4f4e\uff0c\u5219\u4e3a \u8fc7\u62df\u5408 \u73b0\u8c61\uff0c\u9700\u8981\u5bf9 \u8d85\u53c2\u6570 \u8c03\u53c2\uff0c\u5b98\u7f51\u67e5\u8be2\u5b83\u5404\u4e2a\u5c5e\u6027</li> <li>\u8bc4\u4f30\u56de\u5f52\u6a21\u578b\u7684Metric (e.g. mse, rmse, mas, r2)\uff0c\u6570\u503c\u4ece0\u5230\u6b63\u65e0\u7a77\uff0c\u8868\u793a\u79bb\u6563\u7a0b\u5ea6\uff0c\u8bef\u5dee\u503c\u8d8a\u5c0f\u8d8a\u51c6</li> <li>API \u662f\u591a\u8f6f\u4ef6\u534f\u540c\u5de5\u4f5c\u672f\u8bed\uff0c\u4eceGH\u2192python\u2192sklearn\uff0c\u9700\u8981\u901a\u8fc7\u8c03\u7528\u7684\u65b9\u6cd5\uff0c\u642d\u63a5\u6a21\u5757\u548c\u4f20\u8f93\u6570\u636e</li> <li>PKL\u6a21\u578b\u662f\u6587\u4ef6\u7c7b\u578b\uff0c\u5c5e\u4e8epytorch\u6df1\u5ea6\u5b66\u4e60\u5305\u7684\u6587\u4ef6\uff0csklearn\u662f\u673a\u5668\u5b66\u4e60\u5305\uff0cnumpy\u662f\u79d1\u5b66\u5206\u6790\u5de5\u5177</li> <li>\u673a\u5668\u5b66\u4e60 | \u56db\u5927\u5e38\u7528\u673a\u5668\u5b66\u4e60Python\u5e93\u4ecb\u7ecd \u5206\u522b\u662f\uff1aScikit-learn\uff0cKeras\uff0cTensorFlow\uff0cPyTorch </li> </ul>"},{"location":"Seminar%20on%20Architecture/","title":"Seminar on Architecture-\u5efa\u7b51\u53f2\u8bba\u4e13\u9898-01","text":""},{"location":"Seminar%20on%20Architecture/#by","title":"\u8bfe\u7a0b\u7b80\u4ecb\uff1a\u5efa\u7b51\u8d4b\u6bd4\u5174 by \u9f9a\u4e66\u7ae0","text":"<p>Architectural Timeline: From traditional to modern, relationship between history and theory. Turning Point: Every \"\u5927\u8dc3\u8fdb\" based on the epoch of new thinking and new technology.</p> <p> Architectural History Outline</p>"},{"location":"Seminar%20on%20Architecture/#_1","title":"\u5efa\u7b51\u53f2\u7684\u4e09\u6bb5\u5206\u9694","text":"Time Architectural Types Structure Event \u897f\u5143 to 17th century Classical Architecture Linear A-B-C Ancient Civilization 18th century to 1945 Modern[^1] Architecture Network # Enlightenment &amp; Industrial Revolution 1945 to Present Contemporary (International or modern[^2]) Architecture Network # 2nd World War (1939-1945) <p>[^1]: The long period of history against classical architecture, e.g. Vernacular Movement, Art Nouveau, The Arts &amp; Crafts Movement, Deutscher Werkbund, Bauhaus. [^2]:The criticism of international style which has no local culture, history and people.</p> <p></p> <p>Architectural History Mapping</p>"},{"location":"Seminar%20on%20Architecture/#_2","title":"\u5efa\u7b51\u53f2\u7684\u53d1\u5c55\u8109\u7edc","text":"Time and Area Characteristic Reference \u897f\u5143\u524d \u57c3\u53ca\u548c\u897f\u4e9a ==Monumentality==\uff1a\u9ad8\u2192\u65b9\u5c16\u7891\u2192Skyscraper\uff1b\u5927\u2192\u91d1\u5b57\u5854\u2192Bigness Pyramid \u53e4\u4ee3 \u5e0c\u814a\u548c\u7f57\u9a6c \u5e0c\u814a\uff1a==\u6570\u5b66\u67f1\u5f0f==\uff0c\u4e16\u4fd7\u7f8e\u5b66\u7684\u8d77\u6e90\uff1b\u7f57\u9a6c\uff1a==\u7eaa\u5ff5\u6027==\uff0c\u56fd\u5bb6\u6743\u529b\u7684\u8c61\u5f81 \"Form, Space and Order\" \u4e2d\u53e4\u65f6\u671f Dark Age ==Mix &amp; Match==\uff1a\u65e9\u671f\u57fa\u7763\u6559\u2192\u62dc\u5360\u5ead\u65f6\u671f\uff08\u4f0a\u65af\u5170\u6559/\u5341\u5b57\u519b/\u8d38\u6613/\u6218\u4e89\uff09\u2192\u4eff\u7f57\u9a6c\u2192 :latin_cross:\u5341\u5b57\u6559\u5802\u200b Cathedral 14C \u6cd5\u56fd\u7684Gothic ==\u7ed3\u6784\u7684\u900f\u660e\u6027==\uff1a\u6c42\u9ad8\uff0c\u5c16\u62f1\uff0c\u98de\u6276\u58c1\uff0c\u7ed3\u6784\u5916\u9732\uff0c\u5899\u58c1\u53bb\u6389\uff0c\u73ab\u7470\u82b1\u7a97\uff0c\u5f69\u8272\u73bb\u7483 Notre Dame de Paris 15C Renaissance \u5b8c\u7f8e\u6807\u51c6\u5316\uff1a\u8ffd\u6eaf\u5e0c\u814a\u548c\u7f57\u9a6c\u6587\u660e\uff0c\u672c\u8d28\u53d1\u5c55==Humanism==\uff0c\u7528\u201c\u56fe\u5b66\u201d\u63a7\u5236\u8bbe\u8ba1\u3001\u706d\u70b9\u900f\u89c6 Andrea Palladio 15C\u540e\u671f \u5df4\u6d1b\u514b\u65f6\u671f \u4ece\u6587\u827a\u590d\u5174\u7684\u7acb\u683c\u5230==\u7834\u683c==\u2192\u7e41\u590d\u2192\u88c5\u9970\uff08\u6d1b\u53ef\u53ef\uff09\uff0c\u7ec8\u7a76\u662f\u4e00\u79cd\u8fc7\u6e21\u65f6\u671f\uff0c\u5947\u6280\u6deb\u5de7 Michelangelo Buonarroti 19C \u73b0\u4ee3\u4e3b\u4e49\u7cbe\u795e ==\u7406\u6027+\u5b9e\u8bc1==\uff1a\u53bb\u88c5\u9970\uff08\u8c61\u5f81\u3001\u5177\u8c61\uff09\uff1b\u62bd\u8c61\u5316\uff1b\u900f\u660e\u6027\uff1b\u53bb\u7eaa\u5ff5\u6027\uff08\u53cd\u4e2d\u8f74\u5bf9\u79f0\uff09\uff1b\u52a8\u611f\u6027\uff08\u53bb\u65b9\u76d2\u5b50\uff09 De Stijl"},{"location":"Seminar%20on%20Architecture/#seminar-on-architecture-02","title":"Seminar on Architecture-\u5efa\u7b51\u53f2\u8bba\u4e13\u9898-02","text":""},{"location":"Seminar%20on%20Architecture/#-","title":"\u4e0d\u673d\u7684\u7eaa\u5ff5\u6027-\u5fae\u89c2\u3001\u6570\u5927\u3001\u96c4\u6d51\u4e0e\u6d69\u701a","text":""},{"location":"Seminar%20on%20Architecture/#_3","title":"\u7f8e\u7684\u5b9a\u4e49\u548c\u53d6\u5411","text":"<ul> <li>[x] Sublime: abstract, the symbol of philosophical beauty, the kind of space spirit and perception that beyond time and locality, monumentality.</li> <li>[ ] Beauty: relate to culture, locality, epoch and society, an aesthetic that changes over time, golden scale (1.618 &amp; 1.414) and perfect geometry. </li> </ul> <p>1. \u96c4\u6d51\u7eaf\u7cb9\u7684\u539f\u578b\u51e0\u4f55\uff1aPrototype + Bigness</p> <p>2. \u5d07\u9ad8\u552f\u4e00\u7684\u5782\u76f4\u5347\u534e\uff1aAgainst Gravity + Highness</p> <p>Rem Koolhaas \"Delirious New York\", 1978: The architecture has two prototypes, a needle and a ball.</p> <p>3. \u6570\u5927\u4e3a\u7f8e\u7684\u795e\u5723\u7ecf\u9a8c\uff1aVolume + Experience</p> <p>4. \u8fdc\u5668\u8fd1\u5bc2\u7684\u6d69\u701a\u7559\u767d\uff1aBlank + Distance</p>"},{"location":"Seminar%20on%20Architecture/#1-prototype-bigness","title":"1. \u96c4\u6d51\u7eaf\u7cb9\u7684\u539f\u578b\u51e0\u4f55\uff1aPrototype + Bigness","text":"<ul> <li>Stonehenge </li> <li>Define spatial boundary, without window, door and roof.</li> <li>Create the dialogue between artifacts and nature.</li> <li> <p>\"Will\" is the representation of beauty, like the Great Wall.</p> </li> <li> <p>Pyramid </p> </li> <li>Landscape creating the ambiguity and double characters (outside: pure sculpture &amp; inside: inner space).</li> <li> <p>\"\u91d1\u5b57\u5854\u4e0e\u8ff7\u5bab\"\uff1asingle one + much and infinite.</p> </li> <li> <p>Louvre </p> </li> <li> <p>Monument that is nothing, but contains countless treasures.</p> </li> <li>Transparency which represents the classical architecture.</li> <li> <p>The contrast of times between the pure pyramid and surroundings.</p> </li> <li> <p>Acropolis </p> </li> <li>The western architectural prototype and aesthetic standard. </li> <li> <p>Parthenon Temple and Amphitheatre based on the landscape.</p> </li> <li> <p>Colosseum </p> </li> <li>Three levels with three types of column, Doric, Ionic and Corinthian Order, and the Top level is wall enveloping the building.</li> <li> <p>Two ones and one labyrinth, like a sandwich. This concept is similar to R.Koolhaas, the pure bigness with different functions inside it.</p> </li> <li> <p>Pantheon </p> </li> <li>Gable Wall and Greek Column with perfect scale, Egyptian Obelisk, Roman Dome.</li> <li>The roof has a round hole, which is the most ambiguity, the most sublime and the most interaction with sky.</li> <li>Roma makes the Bigness and the Empty which come from Egypt and Greece into the interior, and uses columns to create layers.</li> <li>\u53c2\u8003\u300a\u5706\u9876\u7684\u6545\u4e8b\u300b\uff0cthe center space is both interior and outdoor, both an architecture and a plaza.</li> <li> <p>Refer to Aldo  Rossi's Cimitero di San Cataldo, Modena(1971), the square cemetery surrounded by walls without roof.</p> </li> <li> <p>Byzantium </p> </li> <li>The civilization between Europe and Asia, Islamic church with dramatic lights vs. Christian church with the cross ending.</li> <li> <p>The byzantine architecture has the huge void space that makes solid transfer to anther sublime, an empty bigness.</p> </li> <li> <p>Newton memorial-Boull\u00e9e</p> </li> <li>18th Century, the concept of monumentality from Enlightenment Movement, which to pursue the sublime of modernism.</li> <li>Refer to Peter Greenaway's The Draughtsman's Contract (1982) and The Belly of an Architect (1987), fore-the perspective, late-Boull\u00e9e.</li> <li></li> </ul>"},{"location":"index_primary/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"index_primary/#commands","title":"Commands","text":""},{"location":"index_primary/#publication","title":"Publication","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"index_primary/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"index_primary/#hello-world","title":"Hello, world!","text":""},{"location":"index_primary/#tracy","title":"Tracy","text":""},{"location":"tutorials/python/01_Python%20Syntax/","title":"1 Basic Syntax","text":"In\u00a0[263]: Copied! <pre>print(\"hello, world!\")\n</pre> print(\"hello, world!\") <pre>hello, world!\n</pre> <p>int\u548cfloat\u662f4\u4e2a\u5b57\u8282\uff0c\u537332\u4e2a\u6bd4\u7279\uff081:8\uff09 double\u662f\u53cc\u7cbe\u5ea6\u7684\u6d6e\u70b9\uff0c\u591a\u4e00\u500d\u5b57\u8282\uff0c\u7cbe\u5ea6\u6700\u9ad8 \u8bf7\u907f\u514d\u62fc\u5199\u9519\u8bef\uff01\u65e0\u81ea\u52a8\u68c0\u67e5\uff01</p> In\u00a0[261]: Copied! <pre># a, _, _a, a_, a1, _1, \u4f46\u662f\u201c\u6570\u5b57\u201d\u4e0d\u53ef\u4ee5\u653e\u5728\u6700\u524d\u9762 e.g. 2a, 2_ are wrong\na = 1\n_a = 2.5\n_1 = 3\n</pre> # a, _, _a, a_, a1, _1, \u4f46\u662f\u201c\u6570\u5b57\u201d\u4e0d\u53ef\u4ee5\u653e\u5728\u6700\u524d\u9762 e.g. 2a, 2_ are wrong a = 1 _a = 2.5 _1 = 3 In\u00a0[26]: Copied! <pre># integer \u6574\u6570\ntype(a)\n</pre> # integer \u6574\u6570 type(a)  Out[26]: <pre>int</pre> In\u00a0[6]: Copied! <pre># float \u6d6e\u70b9\ntype(_a)\n</pre> # float \u6d6e\u70b9 type(_a) Out[6]: <pre>float</pre> In\u00a0[14]: Copied! <pre># \u7528\u53cc\u5f15\u53f7\u8868\u793a\u5b57\u7b26\nmesage = \"hello, Tracy!\"\n</pre> # \u7528\u53cc\u5f15\u53f7\u8868\u793a\u5b57\u7b26 mesage = \"hello, Tracy!\" In\u00a0[15]: Copied! <pre>print(mesage)\n</pre> print(mesage) <pre>hello, Tracy!\n</pre> In\u00a0[16]: Copied! <pre># string \u5b57\u7b26\u4e32\ntype (mesage)\n</pre> # string \u5b57\u7b26\u4e32 type (mesage)  Out[16]: <pre>str</pre> In\u00a0[18]: Copied! <pre>First = \"Zhen\"\nLast  = \"Lei\"\n</pre> First = \"Zhen\" Last  = \"Lei\" In\u00a0[26]: Copied! <pre>name = First + Last\nname\n</pre> name = First + Last name Out[26]: <pre>'ZhenLei'</pre> In\u00a0[35]: Copied! <pre># \"_\"\u7528\u53cc\u5f15\u53f7\u8868\u793astr\uff0c\u4e3a\u8bc6\u522b\u4e0b\u6ed1\u7ebf\nname_1 = First + \"_\" + Last \nname_1\n</pre> # \"_\"\u7528\u53cc\u5f15\u53f7\u8868\u793astr\uff0c\u4e3a\u8bc6\u522b\u4e0b\u6ed1\u7ebf name_1 = First + \"_\" + Last  name_1 Out[35]: <pre>'Zhen_Lei'</pre> In\u00a0[40]: Copied! <pre># \u201c\u201d\u548cstr()\u5206\u522b\u53ef\u5c06\u53d8\u91cf\u8f6c\u6362\u4e3astr\nID = 27\nname_2 = First + \"(\" + \"27\" + \")\" + \" \" + Last\nname_3 = First + \"(\" + str(ID) + \")\" + \" \" + Last\n</pre> # \u201c\u201d\u548cstr()\u5206\u522b\u53ef\u5c06\u53d8\u91cf\u8f6c\u6362\u4e3astr ID = 27 name_2 = First + \"(\" + \"27\" + \")\" + \" \" + Last name_3 = First + \"(\" + str(ID) + \")\" + \" \" + Last  In\u00a0[41]: Copied! <pre>print(name_2)\nprint(name_3)\n</pre> print(name_2) print(name_3) <pre>Zhen(27) Lei\nZhen(27) Lei\n</pre> In\u00a0[48]: Copied! <pre># +\u53f7\u53ef\u76f4\u63a5\u8ba1\u7b97\u591a\u4e2aint\uff0c\u4e5f\u53ef\u4ee5\u5e76\u5217str\ndigit1 = 60\ndigit2 = 99\nans = digit1 + digit2\nans2= str(digit1) + \"and\" + str(digit2)\nprint(ans)\nprint(ans2)\n</pre>  # +\u53f7\u53ef\u76f4\u63a5\u8ba1\u7b97\u591a\u4e2aint\uff0c\u4e5f\u53ef\u4ee5\u5e76\u5217str digit1 = 60 digit2 = 99 ans = digit1 + digit2 ans2= str(digit1) + \"and\" + str(digit2) print(ans) print(ans2) <pre>159\n60and99\n</pre> In\u00a0[292]: Copied! <pre>print(1, 2, 3, sep = \"&lt;\")\n</pre> print(1, 2, 3, sep = \"&lt;\") <pre>1&lt;2&lt;3\n</pre> <p>\\n \u6362\u884c \\t tab\u6b21\u7ea7 8\u4e2a\u4f4d\u6570 \\\\ \u53ea\u6253\u5370\" \\ \" \\ \u6362\u884c\u65b9\u4fbf\u64cd\u4f5c\u8fc7\u957f\u4fe1\u606f</p> In\u00a0[52]: Copied! <pre>print(\"Python\")\nprint(\"\\nPython\")\nprint(\"\\tPython\")\n</pre> print(\"Python\") print(\"\\nPython\") print(\"\\tPython\") <pre>Python\n\nPython\n\tPython\n</pre> In\u00a0[53]: Copied! <pre>print(\"per = price\\\\amount\")\n</pre> print(\"per = price\\\\amount\") <pre>per = price\\amount\n</pre> In\u00a0[54]: Copied! <pre>print(\"Prices:\\nApple:$5,\\nPear:$3\")\n</pre> print(\"Prices:\\nApple:$5,\\nPear:$3\") <pre>Prices:\nApple:$5,\nPear:$3\n</pre> In\u00a0[28]: Copied! <pre>print(\"Prices:\\n\\tApple:$5,\\n\\tPear:$3\")\n</pre> print(\"Prices:\\n\\tApple:$5,\\n\\tPear:$3\") <pre>Prices:\n\tApple:$5,\n\tPear:$3\n</pre> In\u00a0[55]: Copied! <pre># \u4e09\u4e2a\u5f15\u53f7\uff0c\u5185\u90e8\u7684\u5f15\u53f7\u5c06\u4e0d\u53d7\u4efb\u4f55\u5f71\u54cd\ntest_sent = '''\n\"\"Dear Tracy,\\n\\tLong time no see!\"\n'''\nprint(test_sent)\n</pre> # \u4e09\u4e2a\u5f15\u53f7\uff0c\u5185\u90e8\u7684\u5f15\u53f7\u5c06\u4e0d\u53d7\u4efb\u4f55\u5f71\u54cd test_sent = ''' \"\"Dear Tracy,\\n\\tLong time no see!\" ''' print(test_sent) <pre>\n\"\"Dear Tracy,\n\tLong time no see!\"\n\n</pre> In\u00a0[58]: Copied! <pre>result = \"\u7ed3\u679c\u8868\u660e\uff0cSNA-ANN\u6a21\u578b\u66f4\u9002\u7528\u4e8e\u53c2\u8003\u5efa\u7b51\u7269EUI\u4e0e\u603b\u5efa\u7b51\u7269EUI\u4e4b\u95f4\\\n\u7684\u7f51\u7edc\u8f83\u5f31\u4e14\u5efa\u7b51\u7fa4EUI\u6807\u51c6\u5dee\u8f83\u5927\u7684\u5efa\u7b51\u7269\u3002\\\n\\n\u800c\u5bf9\u4e8e\u5176\u4ed6\u4e09\u4e2a\u7f51\u7edc\u90fd\u5f88\u5f3a\u5927\u7684\u5efa\u7b51\u7fa4\uff0cANN \u6a21\u578b\u88ab\u8bc1\u660e\u8db3\u591f\u51c6\u786e\uff0c\u53ef\u4ee5\u9884\u6d4b\u603b\u5efa\u7b51EUI\u3002\"\nprint(result)\n</pre> result = \"\u7ed3\u679c\u8868\u660e\uff0cSNA-ANN\u6a21\u578b\u66f4\u9002\u7528\u4e8e\u53c2\u8003\u5efa\u7b51\u7269EUI\u4e0e\u603b\u5efa\u7b51\u7269EUI\u4e4b\u95f4\\ \u7684\u7f51\u7edc\u8f83\u5f31\u4e14\u5efa\u7b51\u7fa4EUI\u6807\u51c6\u5dee\u8f83\u5927\u7684\u5efa\u7b51\u7269\u3002\\ \\n\u800c\u5bf9\u4e8e\u5176\u4ed6\u4e09\u4e2a\u7f51\u7edc\u90fd\u5f88\u5f3a\u5927\u7684\u5efa\u7b51\u7fa4\uff0cANN \u6a21\u578b\u88ab\u8bc1\u660e\u8db3\u591f\u51c6\u786e\uff0c\u53ef\u4ee5\u9884\u6d4b\u603b\u5efa\u7b51EUI\u3002\" print(result) <pre>\u7ed3\u679c\u8868\u660e\uff0cSNA-ANN\u6a21\u578b\u66f4\u9002\u7528\u4e8e\u53c2\u8003\u5efa\u7b51\u7269EUI\u4e0e\u603b\u5efa\u7b51\u7269EUI\u4e4b\u95f4\u7684\u7f51\u7edc\u8f83\u5f31\u4e14\u5efa\u7b51\u7fa4EUI\u6807\u51c6\u5dee\u8f83\u5927\u7684\u5efa\u7b51\u7269\u3002\n\u800c\u5bf9\u4e8e\u5176\u4ed6\u4e09\u4e2a\u7f51\u7edc\u90fd\u5f88\u5f3a\u5927\u7684\u5efa\u7b51\u7fa4\uff0cANN \u6a21\u578b\u88ab\u8bc1\u660e\u8db3\u591f\u51c6\u786e\uff0c\u53ef\u4ee5\u9884\u6d4b\u603b\u5efa\u7b51EUI\u3002\n</pre> In\u00a0[85]: Copied! <pre>data = \"matrix = 3 4 5\\\n\\n\\t 6 7 8\"\nprint(data)\n</pre> data = \"matrix = 3 4 5\\ \\n\\t 6 7 8\" print(data) <pre>matrix = 3 4 5\n\t 6 7 8\n</pre> In\u00a0[90]: Copied! <pre># \u52a0 \u51cf \u4e58 \u9664\nprint(5+4)\nprint(5-4)\nprint(5*4)\nprint(5/4)\n</pre> # \u52a0 \u51cf \u4e58 \u9664 print(5+4) print(5-4) print(5*4) print(5/4) <pre>9\n1\n20\n1.25\n</pre> In\u00a0[91]: Copied! <pre># \u4e58\u65b9 \u4e24\u4e2a\u4e58\u53f7\n8 ** 2\n</pre> # \u4e58\u65b9 \u4e24\u4e2a\u4e58\u53f7 8 ** 2 Out[91]: <pre>64</pre> In\u00a0[92]: Copied! <pre># \u5185\u7f6ebug \u4e24\u8005\u4e8c\u8fdb\u5236\u65e0\u6cd5\u7cbe\u786e\u8868\u793a\uff0c\u65e0\u9650\u5faa\u73af\u5bfc\u81f4\n0.2 + 0.1\n</pre> # \u5185\u7f6ebug \u4e24\u8005\u4e8c\u8fdb\u5236\u65e0\u6cd5\u7cbe\u786e\u8868\u793a\uff0c\u65e0\u9650\u5faa\u73af\u5bfc\u81f4 0.2 + 0.1  Out[92]: <pre>0.30000000000000004</pre> In\u00a0[324]: Copied! <pre># \u5bfc\u5165math \u57fa\u672c\u6570\u5b66\u5e93\nimport math\nprint(dir(math))\n</pre> # \u5bfc\u5165math \u57fa\u672c\u6570\u5b66\u5e93 import math print(dir(math)) <pre>['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'isqrt', 'lcm', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'nextafter', 'perm', 'pi', 'pow', 'prod', 'radians', 'remainder', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc', 'ulp']\n</pre> In\u00a0[322]: Copied! <pre># log \u8868\u793a\u6307\u6570\u8ba1\u7b97\nprint(\"32 is\",mt.log(32,2),\"powers of 2\")\n</pre> # log \u8868\u793a\u6307\u6570\u8ba1\u7b97 print(\"32 is\",mt.log(32,2),\"powers of 2\") <pre>32 is 5.0 powers of 2\n</pre> In\u00a0[319]: Copied! <pre># \u5706\u5468\u7387\u7684\u8c03\u7528\u51fd\u6570.pi\nprint(\"pi 4 digits = {:.5}\".format(math.pi))\n</pre> # \u5706\u5468\u7387\u7684\u8c03\u7528\u51fd\u6570.pi print(\"pi 4 digits = {:.5}\".format(math.pi)) <pre>pi 4 digits = 3.1416\n</pre> In\u00a0[323]: Copied! <pre># \u5bfc\u5165numpy \u6570\u503c\u8ba1\u7b97\u5e93\nimport numpy\n\nprint(\"numpy.random is a\",\n      type(numpy.random)\n     )\nprint(\"it contains names such as ...\",\n      dir(numpy.random)[-15:]\n     )\n</pre> # \u5bfc\u5165numpy \u6570\u503c\u8ba1\u7b97\u5e93 import numpy  print(\"numpy.random is a\",       type(numpy.random)      ) print(\"it contains names such as ...\",       dir(numpy.random)[-15:]      ) <pre>numpy.random is a &lt;class 'module'&gt;\nit contains names such as ... ['seed', 'set_state', 'shuffle', 'standard_cauchy', 'standard_exponential', 'standard_gamma', 'standard_normal', 'standard_t', 'test', 'triangular', 'uniform', 'vonmises', 'wald', 'weibull', 'zipf']\n</pre> In\u00a0[102]: Copied! <pre># list \u6570\u5217\uff0c\u7528\u65b9\u62ec\u53f7\u8868\u793a\nlst1 = [1, 2, 3, 4] \nprint(type(lst1))\nprint(lst1)\n</pre> # list \u6570\u5217\uff0c\u7528\u65b9\u62ec\u53f7\u8868\u793a lst1 = [1, 2, 3, 4]  print(type(lst1)) print(lst1) <pre>&lt;class 'list'&gt;\n[1, 2, 3, 4]\n</pre> In\u00a0[107]: Copied! <pre># range \u8303\u56f4\uff0c\u7528\u5c0f\u62ec\u53f7\u8868\u793a\nlst2 = range(10) \nprint(type(lst2))\nprint(lst2)\nprint(list(lst2))\n</pre> # range \u8303\u56f4\uff0c\u7528\u5c0f\u62ec\u53f7\u8868\u793a lst2 = range(10)  print(type(lst2)) print(lst2) print(list(lst2)) <pre>&lt;class 'range'&gt;\nrange(0, 10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n</pre> In\u00a0[110]: Copied! <pre># index \u7d22\u5f15\uff0c\u6b64\u5904\u8868\u793a\u7b2c\u4e00\u4f4d\u6570\u503c\nprint(lst1[0])\n</pre> # index \u7d22\u5f15\uff0c\u6b64\u5904\u8868\u793a\u7b2c\u4e00\u4f4d\u6570\u503c print(lst1[0])  <pre>1\n</pre> In\u00a0[112]: Copied! <pre># \u540e\u9762\u6570\u5b572\uff0c\u8868\u793a\u6bcf\u6b21\u7684\u95f4\u9694\u52a02\nprint(list(range(2, 10, 2)))\n</pre> # \u540e\u9762\u6570\u5b572\uff0c\u8868\u793a\u6bcf\u6b21\u7684\u95f4\u9694\u52a02 print(list(range(2, 10, 2)))  <pre>[2, 4, 6, 8]\n</pre> In\u00a0[113]: Copied! <pre>list0_10 = list(lst2)\n</pre> list0_10 = list(lst2) In\u00a0[114]: Copied! <pre>list0_10\n</pre> list0_10 Out[114]: <pre>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</pre> In\u00a0[115]: Copied! <pre>list0_10[1:]\n</pre> list0_10[1:] Out[115]: <pre>[1, 2, 3, 4, 5, 6, 7, 8, 9]</pre> In\u00a0[122]: Copied! <pre>list0_10[1:8]\n</pre> list0_10[1:8] Out[122]: <pre>[1, 2, 3, 4, 5, 6, 7]</pre> In\u00a0[120]: Copied! <pre>list0_10[:-3]\n</pre> list0_10[:-3] Out[120]: <pre>[0, 1, 2, 3, 4, 5, 6]</pre> In\u00a0[121]: Copied! <pre>list0_10[-2]\n</pre> list0_10[-2] Out[121]: <pre>8</pre> In\u00a0[163]: Copied! <pre># list \u6570\u7ec4\uff0c\u7528\u65b9\u62ec\u53f7\u8bbe\uff0c\u7236list\u5305\u542b\u5b50list\narray = [[3,4],[6,7]]\nprint(type(array))\nprint(array[1])\nprint(array[0])\n</pre> # list \u6570\u7ec4\uff0c\u7528\u65b9\u62ec\u53f7\u8bbe\uff0c\u7236list\u5305\u542b\u5b50list array = [[3,4],[6,7]] print(type(array)) print(array[1]) print(array[0]) <pre>&lt;class 'list'&gt;\n[6, 7]\n[3, 4]\n</pre> In\u00a0[164]: Copied! <pre># \u8986\u76d6\u4e0a\u9762list\u7684\u5b50\u96c6\narray[0][1] = 9 \nprint(array)\n</pre> # \u8986\u76d6\u4e0a\u9762list\u7684\u5b50\u96c6 array[0][1] = 9  print(array) <pre>[[3, 9], [6, 7]]\n</pre> In\u00a0[165]: Copied! <pre># .append\uff0c\u5728lsit\u540e\u9762\u6dfb\u52a0\u5143\u7d20\narray.append([5, 0]) \nprint(array)\n</pre> # .append\uff0c\u5728lsit\u540e\u9762\u6dfb\u52a0\u5143\u7d20 array.append([5, 0])  print(array) <pre>[[3, 9], [6, 7], [5, 0]]\n</pre> In\u00a0[166]: Copied! <pre># del\uff0c\u5220\u9664\u5143\u7d20\uff0c\u6b64\u5904\u5220\u9664\u7236list1\ndel array[1] \nprint(array)\n</pre> # del\uff0c\u5220\u9664\u5143\u7d20\uff0c\u6b64\u5904\u5220\u9664\u7236list1 del array[1]  print(array) <pre>[[3, 9], [5, 0]]\n</pre> In\u00a0[167]: Copied! <pre># \u6b64\u5904\u5220\u9664\u7236list\u4e2d\u5b50list\ndel array[1][1]\nprint(array)\n</pre> # \u6b64\u5904\u5220\u9664\u7236list\u4e2d\u5b50list del array[1][1] print(array) <pre>[[3, 9], [5]]\n</pre> In\u00a0[178]: Copied! <pre># dictionary \u5b57\u5178\uff0c\u50a8\u5b58\u6807\u7b7e\u4e0e\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u7528\u5927\u62ec\u53f7\u8868\u793a\ndict_fruit = {\"apple\": 2, \"pear\": 3} \nprint(dict_fruit)\nprint(type(dict_fruit))\nprint(dict_fruit[\"apple\"])\n</pre> # dictionary \u5b57\u5178\uff0c\u50a8\u5b58\u6807\u7b7e\u4e0e\u5bf9\u5e94\u7684\u6570\u503c\uff0c\u7528\u5927\u62ec\u53f7\u8868\u793a dict_fruit = {\"apple\": 2, \"pear\": 3}  print(dict_fruit) print(type(dict_fruit)) print(dict_fruit[\"apple\"]) <pre>{'apple': 2, 'pear': 3}\n&lt;class 'dict'&gt;\n2\n</pre> In\u00a0[174]: Copied! <pre>apple_p = \"The price of apple is \" + str(dict_fruit['apple']) + \"$\"\nprint(apple_p)\n</pre> apple_p = \"The price of apple is \" + str(dict_fruit['apple']) + \"$\" print(apple_p) <pre>The price of apple is 2$\n</pre> In\u00a0[181]: Copied! <pre># k,v \u4ee3\u8868 key,value,\u6307dict\u91cc\u7684\u6807\u7b7e\u548c\u6570\u503c\uff0c.items()\u4ee3\u8868\u8c03\u53d6dict\u76ee\u5f55\nfor k,v in dict_fruit.items(): \n    sentence = \"The price of \" + k + \" is \" + str(v) + \"$\" \n    print(sentence)\n</pre> # k,v \u4ee3\u8868 key,value,\u6307dict\u91cc\u7684\u6807\u7b7e\u548c\u6570\u503c\uff0c.items()\u4ee3\u8868\u8c03\u53d6dict\u76ee\u5f55 for k,v in dict_fruit.items():      sentence = \"The price of \" + k + \" is \" + str(v) + \"$\"      print(sentence) <pre>The price of apple is 2$\nThe price of pear is 3$\n</pre> In\u00a0[189]: Copied! <pre># dict\u5e38\u89c1\u7684\u6784\u5efa\u65b9\u6cd5\uff0c\u5de6\uff1a\u6807\u7b7ekey \u548c \u53f3\uff1a\u6570\u503cvalue\uff0c\u547d\u540d\u7b26\u5408model\u8981\u6c42\ncriterion = ['squared_error', 'friedman_mse', 'absolute_error', 'poisson']\nmax_depth = range(5, 20, 2) # [5, 7, 9, ...]\nmax_leaf_nodes = range(250, 400, 20) # [250, 270, 290,...]\nmin_samples_leaf = range(3, 7) # [3, 4, 5,...]\n\n# \u5b58\u50a8\u4fe1\u606f\uff0c\u7528\u4e8e\u63d0\u53d6\u548c\u67e5\u627e\u7684\u5de5\u4f5c\nparam_grid = dict(crit=criterion, \n                  max_d=max_depth, \n                  max_ln=max_leaf_nodes, \n                  min_sl=min_samples_leaf)\nparam_grid\n</pre> # dict\u5e38\u89c1\u7684\u6784\u5efa\u65b9\u6cd5\uff0c\u5de6\uff1a\u6807\u7b7ekey \u548c \u53f3\uff1a\u6570\u503cvalue\uff0c\u547d\u540d\u7b26\u5408model\u8981\u6c42 criterion = ['squared_error', 'friedman_mse', 'absolute_error', 'poisson'] max_depth = range(5, 20, 2) # [5, 7, 9, ...] max_leaf_nodes = range(250, 400, 20) # [250, 270, 290,...] min_samples_leaf = range(3, 7) # [3, 4, 5,...]  # \u5b58\u50a8\u4fe1\u606f\uff0c\u7528\u4e8e\u63d0\u53d6\u548c\u67e5\u627e\u7684\u5de5\u4f5c param_grid = dict(crit=criterion,                    max_d=max_depth,                    max_ln=max_leaf_nodes,                    min_sl=min_samples_leaf) param_grid  Out[189]: <pre>{'crit': ['squared_error', 'friedman_mse', 'absolute_error', 'poisson'],\n 'max_d': range(5, 20, 2),\n 'max_ln': range(250, 400, 20),\n 'min_sl': range(3, 7)}</pre> In\u00a0[188]: Copied! <pre>print(param_grid[\"crit\"])\n</pre> print(param_grid[\"crit\"]) <pre>['squared_error', 'friedman_mse', 'absolute_error', 'poisson']\n</pre> In\u00a0[218]: Copied! <pre># if\u548cprint\u662f\u5e76\u5217\u5173\u7cfb\uff0c\u4e0d\u5f71\u54cdtime\u7684\u603b\u6570\u5217\ntime = list(range(5))\nfor t in time:\n    if (t &lt;= 3):\n        time.append(t + 10)\n    print(t)\nprint(time)\n</pre> # if\u548cprint\u662f\u5e76\u5217\u5173\u7cfb\uff0c\u4e0d\u5f71\u54cdtime\u7684\u603b\u6570\u5217 time = list(range(5)) for t in time:     if (t &lt;= 3):         time.append(t + 10)     print(t) print(time) <pre>0\n1\n2\n3\n4\n10\n11\n12\n13\n[0, 1, 2, 3, 4, 10, 11, 12, 13]\n</pre> In\u00a0[219]: Copied! <pre># a +=,-=,*=,/= \u8868\u793aa=a(+_*/)a\uff0c\u800c==\u8868\u793a\u5224\u65ad\u662f\u5426\u76f8\u7b49\na = 15\nwhile (a &gt; 10) :\n    print(a)\n    a -= 1\n</pre> # a +=,-=,*=,/= \u8868\u793aa=a(+_*/)a\uff0c\u800c==\u8868\u793a\u5224\u65ad\u662f\u5426\u76f8\u7b49 a = 15 while (a &gt; 10) :     print(a)     a -= 1  <pre>15\n14\n13\n12\n11\n</pre> In\u00a0[220]: Copied! <pre># %\u6307\u500d\u6570\uff0c\u4f59\u6570\u4e3a0\u8868\u793a\u80fd\u88ab\u6574\u9664\nret = 20\nwhile (ret &gt; 5):\n    if (ret % 2 == 0): \n        ret -= 1 \n    elif (ret % 3 == 0):\n        ret -= 2\n    else:\n        ret -= 3\n    print(ret)\n</pre> # %\u6307\u500d\u6570\uff0c\u4f59\u6570\u4e3a0\u8868\u793a\u80fd\u88ab\u6574\u9664 ret = 20 while (ret &gt; 5):     if (ret % 2 == 0):          ret -= 1      elif (ret % 3 == 0):         ret -= 2     else:         ret -= 3     print(ret) <pre>19\n16\n15\n13\n10\n9\n7\n4\n</pre> In\u00a0[221]: Copied! <pre># break \u79bb\u5f00\u6574\u4e2a\u5faa\u73af\uff0c\u4e0d\u518d\u8fd0\u884c\ntime = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1]\nfor t in time :\n    if (t &lt;= 5):\n        break \n    if (t % 2 == 0):\n        t -= 1 \n    elif (t % 3 == 0):\n        t -= 2\n    else:\n        t -= 3\n    print(t)\n</pre> # break \u79bb\u5f00\u6574\u4e2a\u5faa\u73af\uff0c\u4e0d\u518d\u8fd0\u884c time = [15,14,13,12,11,10,9,8,7,6,5,4,3,2,1] for t in time :     if (t &lt;= 5):         break      if (t % 2 == 0):         t -= 1      elif (t % 3 == 0):         t -= 2     else:         t -= 3     print(t) <pre>13\n13\n10\n11\n8\n9\n7\n7\n4\n5\n</pre> <p>if (): elif(): \"repeat\" else:\"last\"</p> <p>\u4e09\u4e2a\u642d\u914d\u65f6\uff0c\u6700\u540e\u53ea\u6709\u4e00\u4e2a\u89e3\uff1b if\u4e0eif\uff0c\u4e92\u76f8\u4e0d\u5e72\u6d89\u5224\u65ad\uff1b if\u4e0eelif\uff0c\u53ea\u6709\u4e00\u4e2a\u5224\u65ad\uff1b if\u4e0eelse\uff0c\u53ea\u6709\u4e00\u4e2a\u7b54\u6848\uff1b \u53ef\u5355\u7528\u3001\u53cc\u7528\u3001\u4e09\u7528</p> In\u00a0[229]: Copied! <pre># \u4e09\u4e2a\u642d\u914d\uff0c\u8fc7\u6ee4\u7b5b\u9009\u540e\u4e3a\u4e00\u4e2a\u89e3\na = 11\nif (a &gt; 10):\n    print(str(a) + \" 1\")\nelif (a &lt; 3):\n    print(str(a) + \" 2\")\nelse: \n    a = None\nprint (a)\n</pre> # \u4e09\u4e2a\u642d\u914d\uff0c\u8fc7\u6ee4\u7b5b\u9009\u540e\u4e3a\u4e00\u4e2a\u89e3 a = 11 if (a &gt; 10):     print(str(a) + \" 1\") elif (a &lt; 3):     print(str(a) + \" 2\") else:      a = None print (a)  <pre>11 1\n11\n</pre> In\u00a0[235]: Copied! <pre># \u53ccif \u540c\u65f6\u8fd0\u884c\uff0c\u4e92\u76f8\u4e0d\u5f71\u54cd\na = 15\nif (a &gt; 10):\n    print(str(a) + \" 1\")\nif (a &gt; 13):\n    print(str(a) + \" 2\")\nelse:\n    print(str(a) + \" 3\")\n</pre> # \u53ccif \u540c\u65f6\u8fd0\u884c\uff0c\u4e92\u76f8\u4e0d\u5f71\u54cd a = 15 if (a &gt; 10):     print(str(a) + \" 1\") if (a &gt; 13):     print(str(a) + \" 2\") else:     print(str(a) + \" 3\")  <pre>15 1\n15 2\n</pre> In\u00a0[233]: Copied! <pre># \u53ccif \u540c\u65f6\u5224\u522b\uff0c\u90fd\u4f1a\u5f71\u54cdelse\na = 12\nif (a &gt; 10):\n    print(str(a) + \" 1\")\nif (a &gt; 13):\n    print(str(a) + \" 2\")\nelse:\n    print(str(a) + \" 3\")\n</pre> # \u53ccif \u540c\u65f6\u5224\u522b\uff0c\u90fd\u4f1a\u5f71\u54cdelse a = 12 if (a &gt; 10):     print(str(a) + \" 1\") if (a &gt; 13):     print(str(a) + \" 2\") else:     print(str(a) + \" 3\")  <pre>12 1\n12 3\n</pre> In\u00a0[236]: Copied! <pre># if \u548c elif \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5224\u65ad\na = 15\nif (a &gt; 10):\n    print(str(a) + \" 1\")\nelif (a &gt; 13):\n    print(str(a) + \" 2\") \nelse:\n    print(str(a) + \" 3\")\n</pre> # if \u548c elif \u6709\u4e14\u53ea\u6709\u4e00\u4e2a\u5224\u65ad a = 15 if (a &gt; 10):     print(str(a) + \" 1\") elif (a &gt; 13):     print(str(a) + \" 2\")  else:     print(str(a) + \" 3\") <pre>15 1\n</pre> In\u00a0[298]: Copied! <pre>True or False\n</pre> True or False Out[298]: <pre>True</pre> In\u00a0[301]: Copied! <pre>True or False and False\n</pre> True or False and False Out[301]: <pre>False</pre> In\u00a0[302]: Copied! <pre>True and False\n</pre> True and False Out[302]: <pre>False</pre> In\u00a0[243]: Copied! <pre>1 in range(10)\n</pre> 1 in range(10)  Out[243]: <pre>True</pre> In\u00a0[244]: Copied! <pre>lst1 = [0,6,5,7,8]\n5 in lst1\n</pre> lst1 = [0,6,5,7,8] 5 in lst1  Out[244]: <pre>True</pre> In\u00a0[245]: Copied! <pre># \u4e24\u4e2a\u201c\u7b49\u53f7\u201d\u4ee3\u8868\u5224\u65ad\u662f\u5426\u76f8\u7b49\na = 1\nb = a + 10\nb ==12\n</pre> # \u4e24\u4e2a\u201c\u7b49\u53f7\u201d\u4ee3\u8868\u5224\u65ad\u662f\u5426\u76f8\u7b49 a = 1 b = a + 10 b ==12  Out[245]: <pre>False</pre> In\u00a0[272]: Copied! <pre># \u4e24\u4e2a\u201c&lt;&lt;\u201d\u4ee3\u8868\u5224\u65ad\u662f\u5426\u5c0f\u4e8e\u4e14\u7b49\u4e8e\nx = 5\nx = x - 4\nif x &lt;&lt; 1:\n    print (\"I like you!\")\n</pre> # \u4e24\u4e2a\u201c&lt;&lt;\u201d\u4ee3\u8868\u5224\u65ad\u662f\u5426\u5c0f\u4e8e\u4e14\u7b49\u4e8e x = 5 x = x - 4 if x &lt;&lt; 1:     print (\"I like you!\") <pre>I like you!\n</pre> In\u00a0[275]: Copied! <pre># == \u6bd4 is \u66f4\u6b63\u5f0f\u7684\u7528\u4e8e\u5224\u65ad\u8bed\u53e5\na is 15\n</pre> # == \u6bd4 is \u66f4\u6b63\u5f0f\u7684\u7528\u4e8e\u5224\u65ad\u8bed\u53e5 a is 15 <pre>&lt;&gt;:2: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n&lt;&gt;:2: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\nC:\\Users\\zhenl\\AppData\\Local\\Temp\\ipykernel_78172\\342756370.py:2: SyntaxWarning: \"is\" with a literal. Did you mean \"==\"?\n  a is 15\n</pre> Out[275]: <pre>False</pre> In\u00a0[250]: Copied! <pre>def plus_sim(a, b):\n    c = a + b\n    return c \n\na = 34\nb = 6\nans = plus_sim(a,b)\nprint(ans)\n</pre> def plus_sim(a, b):     c = a + b     return c   a = 34 b = 6 ans = plus_sim(a,b) print(ans) <pre>40\n</pre> In\u00a0[253]: Copied! <pre># \u7ed3\u5408if \u6210\u4e3a\u6761\u4ef6\u5224\u65ad\u51fd\u6570\ndef plus_con(a, b):\n    c = a+b\n    if (c &gt; 10):\n        return c\n    else:\n        return a\n\nans = plus_con(4,3)\nprint(ans)\n</pre> # \u7ed3\u5408if \u6210\u4e3a\u6761\u4ef6\u5224\u65ad\u51fd\u6570 def plus_con(a, b):     c = a+b     if (c &gt; 10):         return c     else:         return a  ans = plus_con(4,3) print(ans) <pre>4\n</pre> In\u00a0[255]: Copied! <pre># \u82e5else\u6ca1\u6709return\uff0c\u4e0d\u4f1a\u8bb0\u5f55\u503c\uff0c\u6240\u4ee5\u65e0\u89e3\ndef plus_con2(a, b):\n    c = a + b\n    if (c &gt; 10):\n        return c\n    else:\n        c = a - b\n        \nans = plus_con2(4,3)\nprint (ans)\n</pre> # \u82e5else\u6ca1\u6709return\uff0c\u4e0d\u4f1a\u8bb0\u5f55\u503c\uff0c\u6240\u4ee5\u65e0\u89e3 def plus_con2(a, b):     c = a + b     if (c &gt; 10):         return c     else:         c = a - b          ans = plus_con2(4,3) print (ans) <pre>None\n</pre> In\u00a0[287]: Copied! <pre># abs\u8868\u793a\u7edd\u5bf9\u503c\uff0caround\u8868\u793a\u5341\u4f4d\u5c0f\u6570\ndef least_difference(a,b,c):\n    diff1=abs(a-b)\n    diff2=abs(b-c)\n    diff3=abs(a-c)\n    return min(diff1,diff2,diff3)\n</pre> # abs\u8868\u793a\u7edd\u5bf9\u503c\uff0caround\u8868\u793a\u5341\u4f4d\u5c0f\u6570 def least_difference(a,b,c):     diff1=abs(a-b)     diff2=abs(b-c)     diff3=abs(a-c)     return min(diff1,diff2,diff3) In\u00a0[293]: Copied! <pre>print(\n\n    least_difference(1,10,100),\n    least_difference(1,10,10),\n    least_difference(5,6,7),\n)\n</pre> print(      least_difference(1,10,100),     least_difference(1,10,10),     least_difference(5,6,7), ) <pre>9 0 1\n</pre> In\u00a0[296]: Copied! <pre># \u6279\u91cf\u5316\u7684\u51fd\u6570\u5b9a\u4e49\ndef greet(who=\"AI\"):\n    print(\"Hello,\", who)\n\ngreet()\ngreet(who=\"Tracy\")\ngreet(who=\"Python\")\ngreet(who=\"Architecture\")\n</pre> # \u6279\u91cf\u5316\u7684\u51fd\u6570\u5b9a\u4e49 def greet(who=\"AI\"):     print(\"Hello,\", who)  greet() greet(who=\"Tracy\") greet(who=\"Python\") greet(who=\"Architecture\") <pre>Hello, AI\nHello, Tracy\nHello, Python\nHello, Architecture\n</pre> In\u00a0[306]: Copied! <pre>def inspect(x):\n    if not isinstance(x, (int, float, complex)):\n        print(x, \"is unlike any number I've ever seen...\")\n    elif x == 0:\n        print(x, \"is zero\")\n    elif x &gt; 0:\n        print(x, \"is positive\")\n    elif x &lt; 0:\n        print(x, \"is negative\")\n\n        \ninspect(2)\ninspect(0)\ninspect(-8)\ninspect(\"*\")\n</pre> def inspect(x):     if not isinstance(x, (int, float, complex)):         print(x, \"is unlike any number I've ever seen...\")     elif x == 0:         print(x, \"is zero\")     elif x &gt; 0:         print(x, \"is positive\")     elif x &lt; 0:         print(x, \"is negative\")           inspect(2) inspect(0) inspect(-8) inspect(\"*\") <pre>2 is positive\n0 is zero\n-8 is negative\n* is unlike any number I've ever seen...\n</pre> <p>\u7c7b\uff08Class\uff09 \u5c31\u50cf\u662f\u4e00\u4efd\u6c7d\u8f66\u7684\u8bbe\u8ba1\u56fe\u7eb8\uff0c\u5b83\u5b9a\u4e49\u4e86\u6c7d\u8f66\u7684\u7279\u5f81\u548c\u529f\u80fd\u3002\u8bbe\u8ba1\u56fe\u7eb8\u4e0a\u63cf\u8ff0\u4e86\u6c7d\u8f66\u7684\u5c5e\u6027\uff08\u989c\u8272\u3001\u54c1\u724c\u3001\u578b\u53f7\u7b49\uff09\u548c\u884c\u4e3a\uff08\u52a0\u901f\u3001\u5239\u8f66\u3001\u8f6c\u5411\u7b49\uff09\u3002</p> <p>\u5bf9\u8c61\uff08Object\uff09 \u5219\u662f\u6839\u636e\u8fd9\u4efd\u8bbe\u8ba1\u56fe\u7eb8\u5236\u9020\u51fa\u6765\u7684\u5177\u4f53\u6c7d\u8f66\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u76f8\u540c\u7684\u8bbe\u8ba1\u56fe\u7eb8\u5236\u9020\u591a\u8f86\u6c7d\u8f66\uff0c\u5b83\u4eec\u5171\u4eab\u76f8\u540c\u7684\u8bbe\u8ba1\u89c4\u683c\uff08\u5373\u7c7b\u7684\u5b9a\u4e49\uff09\uff0c\u4f46\u53ef\u80fd\u62e5\u6709\u4e0d\u540c\u7684\u5c5e\u6027\u503c\uff08\u4f8b\u5982\u989c\u8272\u3001\u578b\u53f7\uff09\u3002 \u5c5e\u6027\uff08Attributes\uff09 \u662f\u6c7d\u8f66\u7684\u7279\u5f81\uff0c\u6bd4\u5982\u989c\u8272\u3001\u578b\u53f7\u3001\u53d1\u52a8\u673a\u529f\u7387\u7b49\u3002 \u65b9\u6cd5\uff08Methods\uff09 \u662f\u6c7d\u8f66\u53ef\u4ee5\u6267\u884c\u7684\u64cd\u4f5c\uff0c\u4f8b\u5982\u52a0\u901f\u3001\u5239\u8f66\u3001\u8f6c\u5411\u7b49\u3002 \u5b9e\u4f8b\u5316\uff08Instantiate\uff09 \u662f\u6839\u636e\u8bbe\u8ba1\u56fe\u7eb8\u5236\u9020\u4e00\u8f86\u5177\u4f53\u7684\u6c7d\u8f66\u7684\u8fc7\u7a0b\uff0c\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u7684\u8fc7\u7a0b\u3002</p> In\u00a0[283]: Copied! <pre># \u5b9a\u4e49\u6c7d\u8f66\u7c7b class\nclass Car:\n    # \u5b9a\u4e49\u6c7d\u8f66\u5c5e\u6027 attributes\n    def __init__(self, color, model):\n        self.color = color\n        self.model = model\n    # \u5b9a\u4e49\u6c7d\u8f66\u65b9\u6cd5 methods\n    def accelerate(self):\n        print(\"Car is accelerating.\")\n\n# \u5b9e\u4f8b\u5316\u4e24\u8f86\u8f66 objects\ncar1 = Car('red', 'Toyota')\ncar2 = Car('blue', 'Honda')\n\n# \u8c03\u7528\u6c7d\u8f66\u65b9\u6cd5 \ncar1.accelerate() \ncar2.accelerate()\n</pre> # \u5b9a\u4e49\u6c7d\u8f66\u7c7b class class Car:     # \u5b9a\u4e49\u6c7d\u8f66\u5c5e\u6027 attributes     def __init__(self, color, model):         self.color = color         self.model = model     # \u5b9a\u4e49\u6c7d\u8f66\u65b9\u6cd5 methods     def accelerate(self):         print(\"Car is accelerating.\")  # \u5b9e\u4f8b\u5316\u4e24\u8f86\u8f66 objects car1 = Car('red', 'Toyota') car2 = Car('blue', 'Honda')  # \u8c03\u7528\u6c7d\u8f66\u65b9\u6cd5  car1.accelerate()  car2.accelerate()   <pre>Car is accelerating.\nCar is accelerating.\n</pre> In\u00a0[286]: Copied! <pre>class Architect(object): #\u521b\u5efa\u7c7b\n    pass\nCodeWithJackson = Architect() #\u521b\u5efa\u5b9e\u4f8b\nprint(CodeWithJackson) #\u6253\u5370\u5b9e\u4f8b\nprint(Architect) #\u6253\u5370\u7c7b\n\nCodeWithJackson.name = \"Zhen Lei\" #\u521b\u5efa\u5c5e\u6027\nprint(CodeWithJackson.name)\n</pre> class Architect(object): #\u521b\u5efa\u7c7b     pass CodeWithJackson = Architect() #\u521b\u5efa\u5b9e\u4f8b print(CodeWithJackson) #\u6253\u5370\u5b9e\u4f8b print(Architect) #\u6253\u5370\u7c7b  CodeWithJackson.name = \"Zhen Lei\" #\u521b\u5efa\u5c5e\u6027 print(CodeWithJackson.name) <pre>&lt;__main__.Architect object at 0x000001BAC220CEB0&gt;\n&lt;class '__main__.Architect'&gt;\nZhen Lei\n</pre> In\u00a0[256]: Copied! <pre>import this\n</pre> import this <pre>The Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n</pre>"},{"location":"tutorials/python/01_Python%20Syntax/#1-variable","title":"1 \u53d8\u91cf Variable\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#2-string","title":"2 \u5b57\u7b26\u4e32 String\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/","title":"\u5408\u5e76\uff08\u62fc\u63a5\u3001\u63d2\u5165\uff09\u5b57\u7b26\u4e32\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/","title":"\u5236\u8868\u7b26\u6216\u6362\u884c\u7b26\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#3-number","title":"3 \u6570\u5b57 Number\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#integer","title":"\u6574\u6570 Integer\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#float","title":"\u6d6e\u70b9\u6570 Float\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#4-list","title":"4 \u5217\u8868 List\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#0","title":"\u7d22\u5f15\u503c\u4ece0\u5f00\u59cb\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#5-dictionary","title":"5 \u5b57\u5178 Dictionary\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#6-loop","title":"6 \u5faa\u73af Loop\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#for","title":"for \u5faa\u73af\u00b6","text":"<p>\u628a\u4e00\u4e2alist\u7684\u96c6\u5408\u6b21\u6570\u5168\u90e8\u8dd1\u5b8c</p>"},{"location":"tutorials/python/01_Python%20Syntax/#while","title":"while \u5faa\u73af\u00b6","text":"<p>\u7528\u521d\u59cb\u503c\u8fd0\u884c\uff0c\u76f4\u5230\u4e0d\u7b26\u5408\u6761\u4ef6\u505c\u6b62</p>"},{"location":"tutorials/python/01_Python%20Syntax/#7-ifelifelse","title":"7 \u6761\u4ef6\u8bed\u53e5 If/Elif/Else\u00b6","text":""},{"location":"tutorials/python/01_Python%20Syntax/#boolean","title":"\u5224\u65ad Boolean\u00b6","text":"<p>True \u548c False \u7684\u5173\u7cfb</p>"},{"location":"tutorials/python/01_Python%20Syntax/#8-define","title":"8 \u51fd\u6570 Define\u00b6","text":"<p>def \u4ee3\u8868\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u65b9\u5f0f return \u4ee3\u8868\u8fd0\u884c\u7ed3\u675f\uff0c\u5373\u7ec8</p>"},{"location":"tutorials/python/01_Python%20Syntax/#class","title":"\u7c7b Class\u00b6","text":"<p>Python\u4e2d\u91c7\u7528\u7c7b\uff08class\uff09\u7684\u6982\u5ff5\u6765\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff0cObject-Oriented Programming\uff09 OOP\u662f\u4e00\u79cd\u7f16\u7a0b\u8303\u5f0f\uff0c\u5b83\u5c06\u6570\u636e\u548c\u64cd\u4f5c\u6570\u636e\u7684\u65b9\u6cd5\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u4ee3\u7801\u66f4\u6a21\u5757\u5316\u3001\u53ef\u91cd\u7528\u548c\u6613\u4e8e\u7ef4\u62a4</p>"},{"location":"tutorials/python/01_Python%20Syntax/#readme","title":"README\u00b6","text":""},{"location":"tutorials/python/02_Data%20Analysis/","title":"2 Data Analysis","text":"In\u00a0[5]: Copied! <pre># Basic Libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n</pre> # Basic Libraries import numpy as np import pandas as pd import seaborn as sb import matplotlib.pyplot as plt In\u00a0[6]: Copied! <pre>architecture = {\"Name\": [\"museum\", \"school\",\"hosptial\"],\n             \"program\": [5,25,30],\n             \"Population\": [100,1500,300]\n             }\narchitecture_df = pd.DataFrame(architecture)\narchitecture_df\nprint(type(architecture))\n</pre> architecture = {\"Name\": [\"museum\", \"school\",\"hosptial\"],              \"program\": [5,25,30],              \"Population\": [100,1500,300]              } architecture_df = pd.DataFrame(architecture) architecture_df print(type(architecture)) <pre>&lt;class 'dict'&gt;\n</pre> In\u00a0[7]: Copied! <pre>architecture_df\n</pre> architecture_df Out[7]: Name program Population 0 museum 5 100 1 school 25 1500 2 hosptial 30 300 In\u00a0[4]: Copied! <pre>architecture_df[\"Name\"]\n</pre> architecture_df[\"Name\"] Out[4]: <pre>0      museum\n1      school\n2    hosptial\nName: Name, dtype: object</pre> In\u00a0[123]: Copied! <pre>architecture_df.iloc[0]\n</pre> architecture_df.iloc[0] Out[123]: <pre>Name          museum\nprogram            5\nPopulation       100\nName: 0, dtype: object</pre> In\u00a0[124]: Copied! <pre># \u5168\u90e8\u663e\u793a\u5217\u8868\u547d\u5b9a\uff1apd.set_option(\"display.max.rows\",None)\ncsv_data = pd.read_csv('somedata.csv', header = None)\ncsv_data.head()\n</pre> # \u5168\u90e8\u663e\u793a\u5217\u8868\u547d\u5b9a\uff1apd.set_option(\"display.max.rows\",None) csv_data = pd.read_csv('somedata.csv', header = None) csv_data.head() Out[124]: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 0 1 12.6 12.3 1.0708 23 154.25 67.75 23.7 134.9 36.2 93.1 85.2 94.5 59.0 37.3 21.9 32.0 27.4 17.1 1 2 6.9 6.1 1.0853 22 173.25 72.25 23.4 161.3 38.5 93.6 83.0 98.7 58.7 37.3 23.4 30.5 28.9 18.2 2 3 24.6 25.3 1.0414 22 154.00 66.25 24.7 116.0 34.0 95.8 87.9 99.2 59.6 38.9 24.0 28.8 25.2 16.6 3 4 10.9 10.4 1.0751 26 184.75 72.25 24.9 164.7 37.4 101.8 86.4 101.2 60.1 37.3 22.8 32.4 29.4 18.2 4 5 27.8 28.7 1.0340 24 184.25 71.25 25.6 133.1 34.4 97.3 100.0 101.9 63.2 42.2 24.0 32.2 27.7 17.7 In\u00a0[125]: Copied! <pre>print(\"csv_data:\",type(csv_data))\n</pre> print(\"csv_data:\",type(csv_data)) <pre>csv_data: &lt;class 'pandas.core.frame.DataFrame'&gt;\n</pre> In\u00a0[172]: Copied! <pre>html_data = pd.read_html('http://www.imdb.com/title/tt0441773/fullcredits/?ref_=tt_ov_st_sm')\n</pre> html_data = pd.read_html('http://www.imdb.com/title/tt0441773/fullcredits/?ref_=tt_ov_st_sm')  In\u00a0[173]: Copied! <pre>print(\"Data type:\",type(html_data))\n</pre> print(\"Data type:\",type(html_data)) <pre>Data type: &lt;class 'list'&gt;\n</pre> In\u00a0[128]: Copied! <pre>print(\"HTML tables:\",len(html_data))\n</pre> print(\"HTML tables:\",len(html_data)) <pre>HTML tables: 24\n</pre> In\u00a0[129]: Copied! <pre>html_data[3].head()\n</pre> html_data[3].head() Out[129]: 0 1 2 0 Jonathan Aibel ... co-producer 1 Glenn Berger ... co-producer 2 Melissa Cobb ... producer 3 Bill Damaschke ... executive producer 4 Lorne Orleans ... IMAX version (IMAX version) In\u00a0[130]: Copied! <pre>print(\"html_data:\", type(html_data))\n</pre> print(\"html_data:\", type(html_data)) <pre>html_data: &lt;class 'list'&gt;\n</pre> In\u00a0[131]: Copied! <pre># \u8bfb\u53d6Excel\u6587\u4ef6\u547d\u4ee4: xls_data=pd.read_excel(\"\u8def\u5f84\")\nhouseData = pd.read_csv('train.csv')\nhouseData.head()\n</pre> # \u8bfb\u53d6Excel\u6587\u4ef6\u547d\u4ee4: xls_data=pd.read_excel(\"\u8def\u5f84\") houseData = pd.read_csv('train.csv') houseData.head() Out[131]: Id MSSubClass MSZoning LotFrontage LotArea Street Alley LotShape LandContour Utilities ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold YrSold SaleType SaleCondition SalePrice 0 1 60 RL 65.0 8450 Pave NaN Reg Lvl AllPub ... 0 NaN NaN NaN 0 2 2008 WD Normal 208500 1 2 20 RL 80.0 9600 Pave NaN Reg Lvl AllPub ... 0 NaN NaN NaN 0 5 2007 WD Normal 181500 2 3 60 RL 68.0 11250 Pave NaN IR1 Lvl AllPub ... 0 NaN NaN NaN 0 9 2008 WD Normal 223500 3 4 70 RL 60.0 9550 Pave NaN IR1 Lvl AllPub ... 0 NaN NaN NaN 0 2 2006 WD Abnorml 140000 4 5 60 RL 84.0 14260 Pave NaN IR1 Lvl AllPub ... 0 NaN NaN NaN 0 12 2008 WD Normal 250000 <p>5 rows \u00d7 81 columns</p> In\u00a0[132]: Copied! <pre>houseData.shape\n</pre> houseData.shape Out[132]: <pre>(1460, 81)</pre> In\u00a0[133]: Copied! <pre># dtypes \u6570\u636e\u7c7b\u578b\u5bf9\u8c61\nhouseData.dtypes\n</pre> # dtypes \u6570\u636e\u7c7b\u578b\u5bf9\u8c61 houseData.dtypes Out[133]: <pre>Id                 int64\nMSSubClass         int64\nMSZoning          object\nLotFrontage      float64\nLotArea            int64\n                  ...   \nMoSold             int64\nYrSold             int64\nSaleType          object\nSaleCondition     object\nSalePrice          int64\nLength: 81, dtype: object</pre> In\u00a0[211]: Copied! <pre># info \u5217\u4e3e\u6240\u6709\u6570\u503c\u548c\u5bf9\u8c61\u7c7b\u578b\uff0c\u68c0\u67e5\u7f3a\u5931\u503c\nhouseData.info()\n\n# describe \u8ba1\u7b97\u5206\u6790\u6570\u503c\u7c7b\u578b\nhouseData.describe()\n</pre> # info \u5217\u4e3e\u6240\u6709\u6570\u503c\u548c\u5bf9\u8c61\u7c7b\u578b\uff0c\u68c0\u67e5\u7f3a\u5931\u503c houseData.info()  # describe \u8ba1\u7b97\u5206\u6790\u6570\u503c\u7c7b\u578b houseData.describe()  <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     1452 non-null   object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n</pre> Out[211]: Id MSSubClass LotFrontage LotArea OverallQual OverallCond YearBuilt YearRemodAdd MasVnrArea BsmtFinSF1 ... WoodDeckSF OpenPorchSF EnclosedPorch 3SsnPorch ScreenPorch PoolArea MiscVal MoSold YrSold SalePrice count 1460.000000 1460.000000 1201.000000 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 1452.000000 1460.000000 ... 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 1460.000000 mean 730.500000 56.897260 70.049958 10516.828082 6.099315 5.575342 1971.267808 1984.865753 103.685262 443.639726 ... 94.244521 46.660274 21.954110 3.409589 15.060959 2.758904 43.489041 6.321918 2007.815753 180921.195890 std 421.610009 42.300571 24.284752 9981.264932 1.382997 1.112799 30.202904 20.645407 181.066207 456.098091 ... 125.338794 66.256028 61.119149 29.317331 55.757415 40.177307 496.123024 2.703626 1.328095 79442.502883 min 1.000000 20.000000 21.000000 1300.000000 1.000000 1.000000 1872.000000 1950.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 1.000000 2006.000000 34900.000000 25% 365.750000 20.000000 59.000000 7553.500000 5.000000 5.000000 1954.000000 1967.000000 0.000000 0.000000 ... 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 0.000000 5.000000 2007.000000 129975.000000 50% 730.500000 50.000000 69.000000 9478.500000 6.000000 5.000000 1973.000000 1994.000000 0.000000 383.500000 ... 0.000000 25.000000 0.000000 0.000000 0.000000 0.000000 0.000000 6.000000 2008.000000 163000.000000 75% 1095.250000 70.000000 80.000000 11601.500000 7.000000 6.000000 2000.000000 2004.000000 166.000000 712.250000 ... 168.000000 68.000000 0.000000 0.000000 0.000000 0.000000 0.000000 8.000000 2009.000000 214000.000000 max 1460.000000 190.000000 313.000000 215245.000000 10.000000 9.000000 2010.000000 2010.000000 1600.000000 5644.000000 ... 857.000000 547.000000 552.000000 508.000000 480.000000 738.000000 15500.000000 12.000000 2010.000000 755000.000000 <p>8 rows \u00d7 38 columns</p> In\u00a0[135]: Copied! <pre>print(type(houseData))\n</pre> print(type(houseData)) <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\n</pre> In\u00a0[3]: Copied! <pre>pkmndata = pd.read_csv('pokemonData.csv')\npkmndata.head()\n</pre> pkmndata = pd.read_csv('pokemonData.csv') pkmndata.head() Out[3]: # Name Type 1 Type 2 Total HP Attack Defense Sp. Atk Sp. Def Speed Generation Legendary 0 1 Bulbasaur Grass Poison 318 45 49 49 65 65 45 1 False 1 2 Ivysaur Grass Poison 405 60 62 63 80 80 60 1 False 2 3 Venusaur Grass Poison 525 80 82 83 100 100 80 1 False 3 3 VenusaurMega Venusaur Grass Poison 625 80 100 123 122 120 80 1 False 4 4 Charmander Fire NaN 309 39 52 43 60 50 65 1 False In\u00a0[4]: Copied! <pre>print(\"Data type:\",type(pkmndata))\n</pre> print(\"Data type:\",type(pkmndata)) <pre>Data type: &lt;class 'pandas.core.frame.DataFrame'&gt;\n</pre> In\u00a0[5]: Copied! <pre>pkmndata.shape\n</pre> pkmndata.shape Out[5]: <pre>(800, 13)</pre> In\u00a0[14]: Copied! <pre>pkmndata.dtypes\n</pre> pkmndata.dtypes Out[14]: <pre>#              int64\nName          object\nType 1        object\nType 2        object\nTotal          int64\nHP             int64\nAttack         int64\nDefense        int64\nSp. Atk        int64\nSp. Def        int64\nSpeed          int64\nGeneration     int64\nLegendary       bool\ndtype: object</pre> In\u00a0[24]: Copied! <pre># concat \u5408\u5e76\u6570\u636e\u4e2d\u7684\u591a\u4e2a\u5217\u8fdb\u884c\u5206\u6790\nalltypes = pd.concat([pkmndata['Type 1'], pkmndata['Type 2']])\n\n# \u8ba1\u7b97\u5168\u90e8\u5b50\u96c6\u7684\u9891\u7387\u53ca\u79cd\u7c7b\ncounts = alltypes.value_counts()\ntypes = alltypes.unique()\n\n# \u663e\u793a\u8ba1\u7b97\u7ed3\u679c\nprint(counts)\nprint(types)\n</pre> # concat \u5408\u5e76\u6570\u636e\u4e2d\u7684\u591a\u4e2a\u5217\u8fdb\u884c\u5206\u6790 alltypes = pd.concat([pkmndata['Type 1'], pkmndata['Type 2']])  # \u8ba1\u7b97\u5168\u90e8\u5b50\u96c6\u7684\u9891\u7387\u53ca\u79cd\u7c7b counts = alltypes.value_counts() types = alltypes.unique()  # \u663e\u793a\u8ba1\u7b97\u7ed3\u679c print(counts) print(types) <pre>Water       126\nNormal      102\nFlying      101\nGrass        95\nPsychic      90\nBug          72\nGround       67\nFire         64\nPoison       62\nRock         58\nFighting     53\nDark         51\nElectric     50\nDragon       50\nSteel        49\nGhost        46\nFairy        40\nIce          38\ndtype: int64\n['Grass' 'Fire' 'Water' 'Bug' 'Normal' 'Poison' 'Electric' 'Ground'\n 'Fairy' 'Fighting' 'Psychic' 'Rock' 'Ghost' 'Ice' 'Dragon' 'Dark' 'Steel'\n 'Flying' nan]\n</pre> In\u00a0[7]: Copied! <pre>hp = pd.DataFrame(pkmndata['HP'])\nprint(\"Data type : \", type(hp))\nprint(\"Data dims : \", hp.size)\nhp.head()\n</pre> hp = pd.DataFrame(pkmndata['HP']) print(\"Data type : \", type(hp)) print(\"Data dims : \", hp.size) hp.head() <pre>Data type :  &lt;class 'pandas.core.frame.DataFrame'&gt;\nData dims :  800\n</pre> Out[7]: HP 0 45 1 60 2 80 3 80 4 39 In\u00a0[141]: Copied! <pre># \u8bbe\u7f6e\u521d\u59cb\u98ce\u683c\nsb.set()\n</pre> # \u8bbe\u7f6e\u521d\u59cb\u98ce\u683c sb.set() In\u00a0[174]: Copied! <pre># f \u4ee3\u8868figure\u8bbe\u7f6e\u5c3a\u5bf8\uff0caxes \u521b\u5efa\u5b50\u56fe\u5bf9\u8c61\u6570\nf, axes = plt.subplots(1, 2, figsize=(12, 6)) \n\n# \u5728\u5b50\u56fe[0]\u4e0a\u7ed8\u5236\u7bb1\u7ebf\u56fe\nsb.boxplot(data=hp, ax=axes[0])\n\n# \u5728\u5b50\u56fe[1]\u4e0a\u7ed8\u5236\u5c0f\u63d0\u7434\u56fe\nsb.violinplot(data=hp, ax=axes[1], color='g')\n</pre> # f \u4ee3\u8868figure\u8bbe\u7f6e\u5c3a\u5bf8\uff0caxes \u521b\u5efa\u5b50\u56fe\u5bf9\u8c61\u6570 f, axes = plt.subplots(1, 2, figsize=(12, 6))   # \u5728\u5b50\u56fe[0]\u4e0a\u7ed8\u5236\u7bb1\u7ebf\u56fe sb.boxplot(data=hp, ax=axes[0])  # \u5728\u5b50\u56fe[1]\u4e0a\u7ed8\u5236\u5c0f\u63d0\u7434\u56fe sb.violinplot(data=hp, ax=axes[1], color='g') Out[174]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[160]: Copied! <pre># kde \u62df\u5408\u8d8b\u52bf\u7ebf, x \u5e94\u8be5\u660e\u786e\u8d4b\u4e88\u53d8\u91cf\nsb.histplot(data=hp, x='HP', kde=True, color='red')\n</pre> # kde \u62df\u5408\u8d8b\u52bf\u7ebf, x \u5e94\u8be5\u660e\u786e\u8d4b\u4e88\u53d8\u91cf sb.histplot(data=hp, x='HP', kde=True, color='red')  Out[160]: <pre>&lt;AxesSubplot:xlabel='HP', ylabel='Count'&gt;</pre> In\u00a0[161]: Copied! <pre># \u57fa\u4e8e plt \u521b\u5efa\u9ad8\u7ea7\u76f4\u65b9\u56fe\nplt.figure(figsize=(8, 6))\nn, bins, patches = plt.hist(hp, bins=30, density=True, alpha=0.7, color='blue', edgecolor='black')\n\n# \u4e3a\u6bcf\u4e2a\u67f1\u5f62\u8bbe\u7f6e\u989c\u8272\u6e10\u53d8\nfor i in range(len(patches)):\n    patches[i].set_facecolor(plt.cm.jet(i / len(patches)))\n\n# kde \u62df\u5408\u8d8b\u52bf\u66f2\u7ebf\nkde = sb.kdeplot(data=hp, x='HP', color='red', linestyle='-', linewidth=2)\n\nplt.show()\n</pre> # \u57fa\u4e8e plt \u521b\u5efa\u9ad8\u7ea7\u76f4\u65b9\u56fe plt.figure(figsize=(8, 6)) n, bins, patches = plt.hist(hp, bins=30, density=True, alpha=0.7, color='blue', edgecolor='black')  # \u4e3a\u6bcf\u4e2a\u67f1\u5f62\u8bbe\u7f6e\u989c\u8272\u6e10\u53d8 for i in range(len(patches)):     patches[i].set_facecolor(plt.cm.jet(i / len(patches)))  # kde \u62df\u5408\u8d8b\u52bf\u66f2\u7ebf kde = sb.kdeplot(data=hp, x='HP', color='red', linestyle='-', linewidth=2)  plt.show() In\u00a0[196]: Copied! <pre>hp = pd.DataFrame(pkmndata['HP'])\nattack = pd.DataFrame(pkmndata['Attack'])\n</pre> hp = pd.DataFrame(pkmndata['HP']) attack = pd.DataFrame(pkmndata['Attack']) In\u00a0[197]: Copied! <pre>#\u901a\u8fc7\u8fde\u63a5\u4e24\u4e2a\u53d8\u91cf\u521b\u5efa\u4e00\u4e2a\u8054\u5408dataframe\njointDF = pd.concat([attack, hp], axis = 1)\n</pre> #\u901a\u8fc7\u8fde\u63a5\u4e24\u4e2a\u53d8\u91cf\u521b\u5efa\u4e00\u4e2a\u8054\u5408dataframe jointDF = pd.concat([attack, hp], axis = 1)  In\u00a0[198]: Copied! <pre>jointDF.describe()\n</pre> jointDF.describe() Out[198]: Attack HP count 800.000000 800.000000 mean 79.001250 69.258750 std 32.457366 25.534669 min 5.000000 1.000000 25% 55.000000 50.000000 50% 75.000000 65.000000 75% 100.000000 80.000000 max 190.000000 255.000000 In\u00a0[199]: Copied! <pre>#\u8ba1\u7b97\u4e24\u4e2a\u5217/\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027correlation\njointDF.corr()\n</pre> #\u8ba1\u7b97\u4e24\u4e2a\u5217/\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027correlation jointDF.corr() Out[199]: Attack HP Attack 1.000000 0.422386 HP 0.422386 1.000000 In\u00a0[182]: Copied! <pre>sb.heatmap(jointDF.corr(), vmin = -1, vmax = 1, annot = True, fmt=\".2f\")\n</pre> sb.heatmap(jointDF.corr(), vmin = -1, vmax = 1, annot = True, fmt=\".2f\") Out[182]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[187]: Copied! <pre># \u901a\u8fc7\u7b5b\u9009\u591a\u4e2a\u53d8\u91cf\u521b\u5efa\u4e00\u4e2a\u8054\u5408dataframe\nmultiDF = pd.DataFrame(pkmndata[['HP','Attack','Defense','Speed']])\n</pre> # \u901a\u8fc7\u7b5b\u9009\u591a\u4e2a\u53d8\u91cf\u521b\u5efa\u4e00\u4e2a\u8054\u5408dataframe multiDF = pd.DataFrame(pkmndata[['HP','Attack','Defense','Speed']])  In\u00a0[188]: Copied! <pre>multiDF.describe()\n</pre> multiDF.describe() Out[188]: HP Attack Defense Speed count 800.000000 800.000000 800.000000 800.000000 mean 69.258750 79.001250 73.842500 68.277500 std 25.534669 32.457366 31.183501 29.060474 min 1.000000 5.000000 5.000000 5.000000 25% 50.000000 55.000000 50.000000 45.000000 50% 65.000000 75.000000 70.000000 65.000000 75% 80.000000 100.000000 90.000000 90.000000 max 255.000000 190.000000 230.000000 180.000000 In\u00a0[194]: Copied! <pre>#\u8ba1\u7b97\u591a\u4e2a\u5217/\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027correlation\nmultiDF.corr()\n</pre> #\u8ba1\u7b97\u591a\u4e2a\u5217/\u53d8\u91cf\u4e4b\u95f4\u7684\u76f8\u5173\u6027correlation multiDF.corr() Out[194]: HP Attack Defense Speed HP 1.000000 0.422386 0.239622 0.175952 Attack 0.422386 1.000000 0.438687 0.381240 Defense 0.239622 0.438687 1.000000 0.015227 Speed 0.175952 0.381240 0.015227 1.000000 In\u00a0[200]: Copied! <pre>sb.heatmap(multiDF.corr(), vmin = -1, vmax = 1, annot = True, fmt=\".2f\")\n</pre> sb.heatmap(multiDF.corr(), vmin = -1, vmax = 1, annot = True, fmt=\".2f\") Out[200]: <pre>&lt;AxesSubplot:&gt;</pre> In\u00a0[203]: Copied! <pre># \u8bfb\u53d6\u7edd\u5bf9\u8def\u5f84 pd.read_csv(r\"C:\\Users\\10019155\\Desktop\\Lecture_04\\simulation_data\\Baseline.csv\")\nbaseline_data=pd.read_csv(\"simulation_data/baseline.csv\")\n</pre> # \u8bfb\u53d6\u7edd\u5bf9\u8def\u5f84 pd.read_csv(r\"C:\\Users\\10019155\\Desktop\\Lecture_04\\simulation_data\\Baseline.csv\") baseline_data=pd.read_csv(\"simulation_data/baseline.csv\") In\u00a0[213]: Copied! <pre># index_col \u5c06index\u66ff\u6362\u4e3acolumn\uff0c\u6ce8\u610f\u7b2c\u4e00\u5217\u4e0d\u518d\u662f\u5217\u800c\u662f\u7d22\u5f15!\nbaseline_data = pd.read_csv(\"simulation_data/Baseline.csv\", index_col='Month') \nbaseline_data\n</pre> # index_col \u5c06index\u66ff\u6362\u4e3acolumn\uff0c\u6ce8\u610f\u7b2c\u4e00\u5217\u4e0d\u518d\u662f\u5217\u800c\u662f\u7d22\u5f15! baseline_data = pd.read_csv(\"simulation_data/Baseline.csv\", index_col='Month')  baseline_data Out[213]: Baseline Month January 5.69 February 6.75 March 10.64 April 13.60 May 19.34 June 22.64 July 27.02 August 27.13 September 25.04 October 18.47 November 13.02 December 7.53 In\u00a0[208]: Copied! <pre>baseline_data.index\n</pre> baseline_data.index Out[208]: <pre>Index(['January', 'February', 'March', 'April', 'May', 'June', 'July',\n       'August', 'September', 'October', 'November', 'December'],\n      dtype='object', name='Month')</pre> In\u00a0[209]: Copied! <pre>baseline_data.columns\n</pre> baseline_data.columns Out[209]: <pre>Index(['Baseline'], dtype='object')</pre> In\u00a0[212]: Copied! <pre>baseline_data.info()\n</pre> baseline_data.info() <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 12 entries, January to December\nData columns (total 1 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   Baseline  12 non-null     float64\ndtypes: float64(1)\nmemory usage: 192.0+ bytes\n</pre> In\u00a0[218]: Copied! <pre># \u65b9\u6cd51\uff1a\u63d0\u53d6\u53d8\u91cf\nbaseline_data[\"Baseline\"]\n</pre> # \u65b9\u6cd51\uff1a\u63d0\u53d6\u53d8\u91cf baseline_data[\"Baseline\"] Out[218]: <pre>Month\nJanuary       5.69\nFebruary      6.75\nMarch        10.64\nApril        13.60\nMay          19.34\nJune         22.64\nJuly         27.02\nAugust       27.13\nSeptember    25.04\nOctober      18.47\nNovember     13.02\nDecember      7.53\nName: Baseline, dtype: float64</pre> In\u00a0[220]: Copied! <pre># \u65b9\u6cd52\uff1a\u8c03\u7528\u53d8\u91cf\nbaseline_data.Baseline\n</pre> # \u65b9\u6cd52\uff1a\u8c03\u7528\u53d8\u91cf baseline_data.Baseline Out[220]: <pre>Month\nJanuary       5.69\nFebruary      6.75\nMarch        10.64\nApril        13.60\nMay          19.34\nJune         22.64\nJuly         27.02\nAugust       27.13\nSeptember    25.04\nOctober      18.47\nNovember     13.02\nDecember      7.53\nName: Baseline, dtype: float64</pre> In\u00a0[224]: Copied! <pre>baseline_data.head()\n</pre> baseline_data.head() Out[224]: Baseline Month January 5.69 February 6.75 March 10.64 April 13.60 May 19.34 In\u00a0[225]: Copied! <pre>baseline_data.tail(n=3)\n</pre> baseline_data.tail(n=3) Out[225]: Baseline Month October 18.47 November 13.02 December 7.53 In\u00a0[240]: Copied! <pre>baseline_data.sample()\n</pre> baseline_data.sample() Out[240]: Baseline Month November 13.02 In\u00a0[227]: Copied! <pre># \u4f7f\u7528\u6761\u4ef6\u8bed\u53e5\u8fdb\u884c\u8fc7\u6ee4\nbaseline_data[baseline_data[\"Baseline\"]&gt;10]\n</pre> # \u4f7f\u7528\u6761\u4ef6\u8bed\u53e5\u8fdb\u884c\u8fc7\u6ee4 baseline_data[baseline_data[\"Baseline\"]&gt;10] Out[227]: Baseline Month March 10.64 April 13.60 May 19.34 June 22.64 July 27.02 August 27.13 September 25.04 October 18.47 November 13.02 In\u00a0[231]: Copied! <pre># \u4f7f\u7528\u968f\u673a\u767e\u5206\u6bd4\u8fdb\u884c\u7b5b\u9009\nbaseline_data.sample(frac=0.3)\n</pre> # \u4f7f\u7528\u968f\u673a\u767e\u5206\u6bd4\u8fdb\u884c\u7b5b\u9009 baseline_data.sample(frac=0.3) Out[231]: Baseline Month July 27.02 March 10.64 September 25.04 November 13.02 In\u00a0[232]: Copied! <pre># \u4f7f\u7528\u968f\u673a\u6570\u91cf\u8fdb\u884c\u7b5b\u9009\nbaseline_data.sample(n=4)\n</pre> # \u4f7f\u7528\u968f\u673a\u6570\u91cf\u8fdb\u884c\u7b5b\u9009 baseline_data.sample(n=4) Out[232]: Baseline Month November 13.02 July 27.02 January 5.69 March 10.64 In\u00a0[235]: Copied! <pre>baseline_data.sort_values(\"Baseline\")\n</pre> baseline_data.sort_values(\"Baseline\") Out[235]: Baseline Month January 5.69 February 6.75 December 7.53 March 10.64 November 13.02 April 13.60 October 18.47 May 19.34 June 22.64 September 25.04 July 27.02 August 27.13 In\u00a0[237]: Copied! <pre>baseline_data.sort_index()\n</pre> baseline_data.sort_index() Out[237]: Baseline Month April 13.60 August 27.13 December 7.53 February 6.75 January 5.69 July 27.02 June 22.64 March 10.64 May 19.34 November 13.02 October 18.47 September 25.04 In\u00a0[236]: Copied! <pre>baseline_data.rename(columns={\"Baseline\":\"Baseline Cooling in GWh\"})\n</pre> baseline_data.rename(columns={\"Baseline\":\"Baseline Cooling in GWh\"}) Out[236]: Baseline Cooling in GWh Month January 5.69 February 6.75 March 10.64 April 13.60 May 19.34 June 22.64 July 27.02 August 27.13 September 25.04 October 18.47 November 13.02 December 7.53 In\u00a0[427]: Copied! <pre># \u6062\u590d\u5230\u9ed8\u8ba4\u7684 rcParams \u754c\u9762\u8bbe\u7f6e\nplt.rcParams.update(plt.rcParamsDefault)\nplt.rcParams['figure.figsize'] = (6, 4)\n\nbaseline_data.plot()\n</pre> # \u6062\u590d\u5230\u9ed8\u8ba4\u7684 rcParams \u754c\u9762\u8bbe\u7f6e plt.rcParams.update(plt.rcParamsDefault) plt.rcParams['figure.figsize'] = (6, 4)  baseline_data.plot() Out[427]: <pre>&lt;AxesSubplot:xlabel='Months of the Year'&gt;</pre> In\u00a0[428]: Copied! <pre># \u4f7f\u7528DataFrame\u7684\u5c5e\u6027\u548c.plot()\u51fd\u6570\u4fee\u6539\u56fe\u5f62\u7684\u5404\u4e2a\u90e8\u5206\nbaseline_data.columns.name = 'Scenario'\nbaseline_data.index.name = 'Months of the Year'\nbaseline_data.plot(lw=2, colormap='jet', marker='.', markersize=10, \n        title='Cooling Energy Consumption of Baseline Building in Total GWh')\n</pre> # \u4f7f\u7528DataFrame\u7684\u5c5e\u6027\u548c.plot()\u51fd\u6570\u4fee\u6539\u56fe\u5f62\u7684\u5404\u4e2a\u90e8\u5206 baseline_data.columns.name = 'Scenario' baseline_data.index.name = 'Months of the Year' baseline_data.plot(lw=2, colormap='jet', marker='.', markersize=10,          title='Cooling Energy Consumption of Baseline Building in Total GWh') Out[428]: <pre>&lt;AxesSubplot:title={'center':'Cooling Energy Consumption of Baseline Building in Total GWh'}, xlabel='Months of the Year'&gt;</pre> In\u00a0[290]: Copied! <pre># \u57fa\u4e8e plt \u521b\u5efa\u9ad8\u7ea7\u6298\u7ebf\u56fe\n# \u4eceCSV\u52a0\u8f7d\u6570\u636e\nbaseline_data2= pd.read_csv('simulation_data/baseline.csv')  \n\n# \u83b7\u53d6\u6708\u4efd\u548cBaseline\u6570\u636e\u5217\nx = baseline_data2['Month'] # index\u4e0d\u4f5c\u4e3acolumn\ny = baseline_data2['Baseline']\n\n# \u521b\u5efa\u989c\u8272\u6e10\u53d8\ncolors = plt.cm.magma(np.linspace(0, 1, len(x)))\n\n# \u7ed8\u5236\u6298\u7ebf\u5e76\u5b9e\u73b0\u6e10\u53d8\u8272\nfor i in range(len(x) - 1):\n    plt.plot(x[i:i+2], y[i:i+2], color=colors[i], linewidth=1.5, marker='.', markersize=6)\n\nplt.title('Cooling Energy Consumption of Baseline Building in Total GWh')\nplt.xticks(rotation=45)  # \u65cb\u8f6cx\u8f74\u6807\u7b7e\uff0c\u4f7f\u5176\u66f4\u6613\u8bfb\nplt.xlabel('Month')\nplt.ylabel('Baseline')\nplt.tight_layout()  # \u8c03\u6574\u5e03\u5c40\uff0c\u907f\u514d\u6807\u7b7e\u91cd\u53e0\n</pre> # \u57fa\u4e8e plt \u521b\u5efa\u9ad8\u7ea7\u6298\u7ebf\u56fe # \u4eceCSV\u52a0\u8f7d\u6570\u636e baseline_data2= pd.read_csv('simulation_data/baseline.csv')    # \u83b7\u53d6\u6708\u4efd\u548cBaseline\u6570\u636e\u5217 x = baseline_data2['Month'] # index\u4e0d\u4f5c\u4e3acolumn y = baseline_data2['Baseline']  # \u521b\u5efa\u989c\u8272\u6e10\u53d8 colors = plt.cm.magma(np.linspace(0, 1, len(x)))  # \u7ed8\u5236\u6298\u7ebf\u5e76\u5b9e\u73b0\u6e10\u53d8\u8272 for i in range(len(x) - 1):     plt.plot(x[i:i+2], y[i:i+2], color=colors[i], linewidth=1.5, marker='.', markersize=6)  plt.title('Cooling Energy Consumption of Baseline Building in Total GWh') plt.xticks(rotation=45)  # \u65cb\u8f6cx\u8f74\u6807\u7b7e\uff0c\u4f7f\u5176\u66f4\u6613\u8bfb plt.xlabel('Month') plt.ylabel('Baseline') plt.tight_layout()  # \u8c03\u6574\u5e03\u5c40\uff0c\u907f\u514d\u6807\u7b7e\u91cd\u53e0 In\u00a0[367]: Copied! <pre># os \u5bfc\u5165\u64cd\u4f5c\u529f\u80fd\u6a21\u5757\uff0ce.g.\u6587\u4ef6\u64cd\u4f5c\u3001\u8def\u5f84\u64cd\u4f5c\u3001\u73af\u5883\u53d8\u91cf\nimport os\n\n# \u67e5\u770b\u8be5\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6570\u636e\u6587\u4ef6\npath = \"simulation_data\"\nlis=os.listdir(path)\nprint(lis)\n</pre> # os \u5bfc\u5165\u64cd\u4f5c\u529f\u80fd\u6a21\u5757\uff0ce.g.\u6587\u4ef6\u64cd\u4f5c\u3001\u8def\u5f84\u64cd\u4f5c\u3001\u73af\u5883\u53d8\u91cf import os  # \u67e5\u770b\u8be5\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u6570\u636e\u6587\u4ef6 path = \"simulation_data\" lis=os.listdir(path) print(lis) <pre>['Baseline.csv', 'Scenario - Aircon Schedules.csv', 'Scenario - Cool roof.csv', 'Scenario - Increase Setpoint.csv', 'Scenario - Low-E Glass.csv', 'Scenario - Rooftop Gardens.csv']\n</pre> In\u00a0[357]: Copied! <pre>schedule_scenario=pd.read_csv(\"simulation_data/Scenario - Aircon Schedules.csv\",index_col=\"Month\")\nschedule_scenario.head()\n</pre> schedule_scenario=pd.read_csv(\"simulation_data/Scenario - Aircon Schedules.csv\",index_col=\"Month\") schedule_scenario.head() Out[357]: Scenario - Aircon Schedules Month January 5.61 February 6.50 March 9.70 April 11.95 May 16.52 In\u00a0[358]: Copied! <pre># \u4f7f\u7528.concat()\u51fd\u6570\u5c06\u4e24\u4e2aDataFrames\u5408\u5e76\u6bd4\u8f83\ncombined_data = pd.concat([baseline_data, schedule_scenario], axis=1)\ncombined_data.head()\n</pre> # \u4f7f\u7528.concat()\u51fd\u6570\u5c06\u4e24\u4e2aDataFrames\u5408\u5e76\u6bd4\u8f83 combined_data = pd.concat([baseline_data, schedule_scenario], axis=1) combined_data.head() Out[358]: Baseline Scenario - Aircon Schedules January 5.69 5.61 February 6.75 6.50 March 10.64 9.70 April 13.60 11.95 May 19.34 16.52 In\u00a0[359]: Copied! <pre>combined_data.plot(lw=2, colormap='rainbow', marker='.', markersize=10, \n        title='Comparsion of Annual Cooling Load in Total GWh')\n</pre> combined_data.plot(lw=2, colormap='rainbow', marker='.', markersize=10,          title='Comparsion of Annual Cooling Load in Total GWh') Out[359]: <pre>&lt;AxesSubplot:title={'center':'Comparsion of Annual Cooling Load in Total GWh'}&gt;</pre> In\u00a0[360]: Copied! <pre># \u521b\u5efa\u65b0\u7684\u5217\u6765\u5bfb\u627e\u6570\u636e\u4e2d\u5404\u5217\u4e4b\u95f4\u7684\u5dee\u5f02\ncombined_data[\"Difference\"]=combined_data[\"Baseline\"]-combined_data[\"Scenario - Aircon Schedules\"]\ncombined_data\n</pre> # \u521b\u5efa\u65b0\u7684\u5217\u6765\u5bfb\u627e\u6570\u636e\u4e2d\u5404\u5217\u4e4b\u95f4\u7684\u5dee\u5f02 combined_data[\"Difference\"]=combined_data[\"Baseline\"]-combined_data[\"Scenario - Aircon Schedules\"] combined_data Out[360]: Baseline Scenario - Aircon Schedules Difference January 5.69 5.61 0.08 February 6.75 6.50 0.25 March 10.64 9.70 0.94 April 13.60 11.95 1.65 May 19.34 16.52 2.82 June 22.64 18.89 3.75 July 27.02 22.13 4.89 August 27.13 22.14 4.99 September 25.04 20.38 4.66 October 18.47 15.87 2.60 November 13.02 11.71 1.31 December 7.53 7.16 0.37 In\u00a0[361]: Copied! <pre>combined_data[\"Difference\"].plot.bar(title=\"Difference between Baseline and Optimal in Total GWh\")\n</pre> combined_data[\"Difference\"].plot.bar(title=\"Difference between Baseline and Optimal in Total GWh\") Out[361]: <pre>&lt;AxesSubplot:title={'center':'Difference between Baseline and Optimal in Total GWh'}&gt;</pre> In\u00a0[362]: Copied! <pre>combined_data.plot.bar(title=\"Comparsion of Annual Cooling Load in Total GWh\")\n</pre> combined_data.plot.bar(title=\"Comparsion of Annual Cooling Load in Total GWh\") Out[362]: <pre>&lt;AxesSubplot:title={'center':'Comparsion of Annual Cooling Load in Total GWh'}&gt;</pre> In\u00a0[363]: Copied! <pre>def get_difference_conditional(monthly_data):\n    if monthly_data.name in ['June','July','August']:\n        return 0\n    else:\n        return monthly_data['Baseline'] - monthly_data['Scenario - Aircon Schedules']\n</pre> def get_difference_conditional(monthly_data):     if monthly_data.name in ['June','July','August']:         return 0     else:         return monthly_data['Baseline'] - monthly_data['Scenario - Aircon Schedules'] In\u00a0[364]: Copied! <pre># lambda \u662f\u533f\u540d\u51fd\u6570\uff0c\u5b83\u5c06\u6bcf\u4e00\u884c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9\u5b9a\u4e49\u51fd\u6570\n# axis=1 \u8868\u793a\u6cbf\u7740\u6570\u636e\u6846\u7684\u884c\u65b9\u5411\u5e94\u7528\u51fd\u6570\uff0c\u5c06\u6bcf\u4e00\u884c\u4f5c\u4e3a\u4e00\u4e2aSeries\u5bf9\u8c61\u4f20\u9012\u7ed9\u5b9a\u4e49\u51fd\u6570\ncombined_data['Difference_NoSummer'] = combined_data.apply(lambda x: get_difference_conditional(x), axis=1)\n</pre> # lambda \u662f\u533f\u540d\u51fd\u6570\uff0c\u5b83\u5c06\u6bcf\u4e00\u884c\u4f5c\u4e3a\u8f93\u5165\u4f20\u9012\u7ed9\u5b9a\u4e49\u51fd\u6570 # axis=1 \u8868\u793a\u6cbf\u7740\u6570\u636e\u6846\u7684\u884c\u65b9\u5411\u5e94\u7528\u51fd\u6570\uff0c\u5c06\u6bcf\u4e00\u884c\u4f5c\u4e3a\u4e00\u4e2aSeries\u5bf9\u8c61\u4f20\u9012\u7ed9\u5b9a\u4e49\u51fd\u6570 combined_data['Difference_NoSummer'] = combined_data.apply(lambda x: get_difference_conditional(x), axis=1) In\u00a0[365]: Copied! <pre>combined_data['Difference_NoSummer'].plot.bar(title='Difference between Baseline and Improved Schedules in Total GWh')\n</pre> combined_data['Difference_NoSummer'].plot.bar(title='Difference between Baseline and Improved Schedules in Total GWh') Out[365]: <pre>&lt;AxesSubplot:title={'center':'Difference between Baseline and Improved Schedules in Total GWh'}&gt;</pre> In\u00a0[436]: Copied! <pre># \u628a\u6240\u6709\u6587\u4ef6\u653e\u5728\u4e00\u4e2a\u540d\u4e3a`list_of_files'\u7684\u5217\u8868\u4e2d\nlist_of_files = os.listdir(\"simulation_data\")\nlist_of_files\n</pre> # \u628a\u6240\u6709\u6587\u4ef6\u653e\u5728\u4e00\u4e2a\u540d\u4e3a`list_of_files'\u7684\u5217\u8868\u4e2d list_of_files = os.listdir(\"simulation_data\") list_of_files Out[436]: <pre>['Baseline.csv',\n 'Scenario - Aircon Schedules.csv',\n 'Scenario - Cool roof.csv',\n 'Scenario - Increase Setpoint.csv',\n 'Scenario - Low-E Glass.csv',\n 'Scenario - Rooftop Gardens.csv']</pre> In\u00a0[448]: Copied! <pre># \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6587\u4ef6\u7684DataFrame\ndata_frames = []\n</pre> # \u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u4e2a\u6587\u4ef6\u7684DataFrame data_frames = [] In\u00a0[438]: Copied! <pre># \u4f7f\u7528Python list\u5bf9\u8c61\u7684.append()\u548c.concat()\u6765\u5faa\u73af\u83b7\u53d6\u6bcf\u4e2a\u6570\u636e\nfor filename in list_of_files:\n    if filename.endswith('.csv'):\n        file_path = os.path.join(\"simulation_data\", filename)  # \u83b7\u53d6\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\n        df = pd.read_csv(file_path, index_col='Month')  # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e\u5230 DataFrame\n        data_frames.append(df)  # \u5c06 DataFrame \u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n        \n# \u6a2a\u5411\u5408\u5e76\u6240\u6709\u6570\u636e\u6846\nmerged_data = pd.concat(data_frames, axis=1)\n\n# \u6253\u5370\u5408\u5e76\u540e\u7684\u6570\u636e\u6846\nprint(type(merged_data))\n</pre> # \u4f7f\u7528Python list\u5bf9\u8c61\u7684.append()\u548c.concat()\u6765\u5faa\u73af\u83b7\u53d6\u6bcf\u4e2a\u6570\u636e for filename in list_of_files:     if filename.endswith('.csv'):         file_path = os.path.join(\"simulation_data\", filename)  # \u83b7\u53d6\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84         df = pd.read_csv(file_path, index_col='Month')  # \u8bfb\u53d6\u6587\u4ef6\u6570\u636e\u5230 DataFrame         data_frames.append(df)  # \u5c06 DataFrame \u6dfb\u52a0\u5230\u5217\u8868\u4e2d          # \u6a2a\u5411\u5408\u5e76\u6240\u6709\u6570\u636e\u6846 merged_data = pd.concat(data_frames, axis=1)  # \u6253\u5370\u5408\u5e76\u540e\u7684\u6570\u636e\u6846 print(type(merged_data)) <pre>&lt;class 'pandas.core.frame.DataFrame'&gt;\n</pre> In\u00a0[439]: Copied! <pre>merged_data.head()\n</pre> merged_data.head() Out[439]: Baseline Scenario - Aircon Schedules Scenario - Cool roof Scenario - Increase Setpoint Scenario - Low-E Glass Scenario - Rooftop Gardens Month January 5.69 5.61 4.46 2.73 5.41 6.30 February 6.75 6.50 5.39 3.88 6.48 7.15 March 10.64 9.70 8.96 6.60 10.37 10.90 April 13.60 11.95 11.73 9.37 13.36 13.59 May 19.34 16.52 17.28 14.82 19.14 18.94 In\u00a0[444]: Copied! <pre># \u6062\u590d\u5230\u9ed8\u8ba4\u7684 rcParams \u754c\u9762\u8bbe\u7f6e\nplt.rcParams.update(plt.rcParamsDefault)\nplt.rcParams['figure.figsize'] = (12, 6)\n\nmerged_data.plot(lw=1, colormap='inferno', marker='.', markersize=5, \n        title='Comparsion of Different Scenarios in Total GWh')\nplt.xlabel('Month')\nplt.ylabel('Cooling Load')\n\n# \u8bbe\u7f6e x \u8f74\u7684\u523b\u5ea6\nmonths = merged_data.index.tolist()  # \u83b7\u53d6\u6708\u4efd\u5217\u8868\nplt.xticks(range(len(months)), months, rotation=45, fontsize=10)  # \u8bbe\u7f6e\u523b\u5ea6\u4f4d\u7f6e\u548c\u6807\u7b7e\nplt.tight_layout()  # \u8c03\u6574\u5e03\u5c40\uff0c\u9632\u6b62\u5143\u7d20\u91cd\u53e0\n</pre> # \u6062\u590d\u5230\u9ed8\u8ba4\u7684 rcParams \u754c\u9762\u8bbe\u7f6e plt.rcParams.update(plt.rcParamsDefault) plt.rcParams['figure.figsize'] = (12, 6)  merged_data.plot(lw=1, colormap='inferno', marker='.', markersize=5,          title='Comparsion of Different Scenarios in Total GWh') plt.xlabel('Month') plt.ylabel('Cooling Load')  # \u8bbe\u7f6e x \u8f74\u7684\u523b\u5ea6 months = merged_data.index.tolist()  # \u83b7\u53d6\u6708\u4efd\u5217\u8868 plt.xticks(range(len(months)), months, rotation=45, fontsize=10)  # \u8bbe\u7f6e\u523b\u5ea6\u4f4d\u7f6e\u548c\u6807\u7b7e plt.tight_layout()  # \u8c03\u6574\u5e03\u5c40\uff0c\u9632\u6b62\u5143\u7d20\u91cd\u53e0"},{"location":"tutorials/python/02_Data%20Analysis/#pandasnumpymatplotlibseaborn-python","title":"Pandas\u3001NumPy\u3001Matplotlib\u548cSeaborn \u56db\u5927Python\u5e93\u00b6","text":"<p>Pandas\u662f\u4e00\u4e2a\u6570\u636e\u5904\u7406\u548c\u5206\u6790\u5e93,\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u6570\u636e\u7ed3\u6784\u548c\u6570\u636e\u64cd\u4f5c\u5de5\u5177,\u7279\u522b\u9002\u7528\u4e8e\u5904\u7406\u7ed3\u6784\u5316\u6570\u636e,\u5982\u8868\u683c\u548c\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u3002 NumPy\u662f\u4e00\u4e2a\u7528\u4e8e\u6570\u503c\u8ba1\u7b97\u7684\u5e93,\u63d0\u4f9b\u4e86\u591a\u7ef4\u6570\u7ec4\u5bf9\u8c61\u548c\u5404\u79cd\u6570\u5b66\u51fd\u6570,\u7528\u4e8e\u8fdb\u884c\u9ad8\u6548\u7684\u6570\u503c\u8ba1\u7b97\u3002 Matplotlib\u662f\u4e00\u4e2a\u7528\u4e8e\u7ed8\u5236\u56fe\u5f62\u548c\u53ef\u89c6\u5316\u6570\u636e\u7684\u5e93,\u5b83\u63d0\u4f9b\u4e86\u5404\u79cd\u7ed8\u56fe\u9009\u9879,\u7528\u4e8e\u521b\u5efa\u5404\u79cd\u7c7b\u578b\u7684\u9759\u6001\u548c\u52a8\u6001\u56fe\u8868\u3002 Seaborn\u662f\u4e00\u4e2a\u57fa\u4e8eMatplotlib\u7684\u6570\u636e\u53ef\u89c6\u5316\u5e93,\u4e13\u6ce8\u4e8e\u7edf\u8ba1\u6570\u636e\u53ef\u89c6\u5316,\u80fd\u591f\u521b\u5efa\u5404\u79cd\u6f02\u4eae\u7684\u7edf\u8ba1\u56fe\u5f62\u3002</p>"},{"location":"tutorials/python/02_Data%20Analysis/#1-pandas-dataframe","title":"1 Pandas Dataframe\u00b6","text":"<p>\u5b83\u975e\u5e38\u63a5\u8fd1\u4e8e \"dictionary\"\uff0c\u53ef\u4ee5\u4ece \"dictionary \"\u5f00\u59cb\u521b\u5efa\u4e00\u4e2a \"DataFrame\"</p>"},{"location":"tutorials/python/02_Data%20Analysis/#import-csv-file-into-a-dataframe","title":"Import CSV file into a DataFrame\u00b6","text":"<p>\u5982\u679c\u6570\u636e\u96c6\u662f\u6807\u51c6\u7684CSV\u683c\u5f0f\uff08\u5e73\u9762\u6587\u4ef6\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528Pandas\u7684<code>read_csv</code>\u51fd\u6570</p>"},{"location":"tutorials/python/02_Data%20Analysis/#import-html-file-into-a-dataframe","title":"Import HTML file into a Dataframe\u00b6","text":"<p>\u5982\u679c\u6570\u636e\u96c6\u662f\u5728\u4e00\u4e2aHTML\u7f51\u7ad9\u7684\u6b63\u5f0f\u8868\u683c\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528Pandas\u7684<code>read_html</code>\u51fd\u6570\u3002 e.g. \u83b7\u53d6\u300a\u529f\u592b\u718a\u732b\u300b\u7684\u6f14\u5458\uff1ahttp://www.imdb.com/title/tt0441773/fullcredits/?ref_=tt_ov_st_sm</p>"},{"location":"tutorials/python/02_Data%20Analysis/#import-xls-file-into-a-dataframe","title":"Import XLS file into a DataFrame\u00b6","text":"<p>\u6570\u636e\u96c6\u662f\u5fae\u8f6f\u7684XLS\u6216XLSX\u683c\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528Pandas\u7684<code>read_excel</code>\u51fd\u6570 \u4f7f\u7528<code>read_excel</code>\u51fd\u6570\uff0c\u9700\u8981\u7528Anaconda\u5b89\u88c5<code>xlrd</code>\u6a21\u5757</p> <p>xls_data = pd.read_excel('data/somedata.xlsx', sheet_name = 'Sheet1', header = None)</p> <p>xls_data.head() print(\"Data type : \", type(xls_data)) print(\"Data dims : \", xls_data.shape)</p>"},{"location":"tutorials/python/02_Data%20Analysis/#2-dataset-variable-analysis","title":"2 Dataset Variable Analysis\u00b6","text":"<p>\u6765\u81eaKaggle\u7684\u6570\u636e\u96c6\uff1aPokemon with stats \u6765\u6e90\uff1ahttps://www.kaggle.com/abcsds/pokemon \u6570\u636e\u96c6\u662fCSV\u683c\u5f0f\u7684\uff0c\u5148\u4f7f\u7528head\u51fd\u6570\u5feb\u901f\u6d4f\u89c8\u6570\u636e <code>.value_counts</code>\u8868\u793a\u9891\u6b21\u7edf\u8ba1\uff0c<code>.unique</code>\u8868\u793a\u4e0d\u91cd\u590d\u503c</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u63d0\u53d6\u5355\u4e00\u53d8\u91cf\u00b6","text":"<p>\u5206\u6790\u6570\u636e\u96c6\u4e2d\u7684\u4e00\u4e2a\u5355\u4e00\u53d8\u91cf\uff0cHP \u63d0\u53d6\u8fd9\u4e2a\u53d8\u91cf\u548c\u5b83\u7684\u76f8\u5173\u6570\u636e\u4f5c\u4e3aPandas\u7684 \"\u6570\u636e\u6846\u67b6\"</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u5355\u53d8\u91cf\u7edf\u8ba1\u00b6","text":"<p>\u4f7f\u7528<code>describe</code>\u68c0\u67e5\u5355\u53d8\u91cf\u7cfb\u5217\u7684\u6c47\u603b\u7edf\u8ba1 \u4f7f\u7528\u6807\u51c6\u7684<code>boxplot</code>\u76f4\u89c2\u5730\u68c0\u67e5\u6c47\u603b\u7edf\u8ba1</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u63d0\u53d6\u591a\u4e2a\u53d8\u91cf\u00b6","text":"<p>\u5206\u6790\u6570\u636e\u96c6\u4e2d\u7684\u4e24\u4e2a\u53d8\u91cf\uff0cHP\u4e0eAttack \u63d0\u53d6\u8fd9\u4e24\u4e2a\u53d8\u91cf\u548c\u5b83\u4eec\u7684\u76f8\u5173\u6570\u636e\u4f5c\u4e3aPandas\u7684 \"\u6570\u636e\u6846\u67b6\"</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u591a\u53d8\u91cf\u7edf\u8ba1\u00b6","text":"<p>\u4f7f\u7528<code>describe</code>\u68c0\u67e5\u6bcf\u4e2a\u53d8\u91cf\u7684\u5355\u53d8\u91cf\u6c47\u603b\u7edf\u8ba1 \u4f7f\u7528<code>concat</code>\u6216<code>[[\u2026]]</code>\u63d0\u53d6\u591a\u53d8\u91cf\u5e76\u5408\u5e76\u4e3a\u6574\u4f53</p>"},{"location":"tutorials/python/02_Data%20Analysis/#3-dataframe-variable-manager","title":"3 Dataframe Variable Manager\u00b6","text":"<p>pandas\u51fd\u6570\u53ef\u4ee5\u4ece\u5404\u79cd\u6587\u4ef6\u4e2d\u8bfb\u53d6\u548c\u5199\u5165\u6570\u636e DataFrame\u5bf9\u8c61\u5141\u8bb8\u4ee5\u6574\u9f50\u7684\u6570\u636e\u683c\u5f0f\u653e\u7f6e\u6570\u636e\uff0c\u53d8\u91cf\u4e3a\u5217\uff0c\u89c2\u5bdf\u503c\u4e3a\u884c</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u9009\u62e9\u4e00\u5217\u53d8\u91cf\u7684\u5b50\u96c6\u00b6","text":"<p>\u6bcf\u4e00\u5217\u90fd\u662f\u4e00\u4e2aPandas Series\u5bf9\u8c61 Series\u662f\u4e00\u7ef4\u6570\u7ec4\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7d22\u5f15\u4ece0\u5f00\u59cb</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u89c2\u5bdf\u7ed3\u679c\u7684\u5b50\u96c6\u00b6","text":"<p>\u4f7f\u7528<code>.tail()</code>\u548c<code>.head()</code>\u53ea\u770b\u5230\u7b2c\u4e00\u6216\u6700\u540e\u51e0\u884c \u4f7f\u7528<code>.sample</code>\u968f\u673a\u67e5\u770b\u4e00\u5217\u6837\u672c</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u5bf9\u6570\u636e\u8fdb\u884c\u6392\u5e8f\u548c\u91cd\u547d\u540d\u00b6","text":"<p>\u5229\u7528<code>.sort_values / .sort_index</code>\u8fdb\u884c\u6392\u5e8f\uff0c<code>.rename</code>\u8fdb\u884c\u91cd\u547d\u540d</p>"},{"location":"tutorials/python/02_Data%20Analysis/#4-building-energy-visualization","title":"4 Building Energy Visualization\u00b6","text":"<p>baseline\u6a21\u578b\u6570\u636e\u662f\u91c7\u7528\u5e38\u89c4\u8bbe\u8ba1\u65b9\u6848\u7684\u5efa\u7b51\u7684\u8bbe\u8ba1</p>"},{"location":"tutorials/python/02_Data%20Analysis/#baseline","title":"\u6bd4\u8f83\u4e24\u4e2a\u6587\u4ef6\uff08Baseline\u4e0e\u4e0d\u540c\u7684\u65f6\u95f4\u6bb5\u5b89\u6392\uff09\u00b6","text":"<p>\u8bbe\u8ba1\u65b9\u6848\u4f7f\u7528\u7684\u4f18\u5316\u65f6\u95f4\u8868\uff1a\u5efa\u7b51\u7269\u4e0d\u662f\u5168\u5929\u5019\u8fd0\u884c\uff0c\u800c\u662f\u53ea\u5728\u5de5\u4f5c\u65f6\u95f4\u5185\u5f00\u542f\u51b7\u5374\u7cfb\u7edf</p>"},{"location":"tutorials/python/02_Data%20Analysis/","title":"\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u5bf9\u8c61\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5217\u00b6","text":"<p>\u6bd4\u65b9\u8bf4\uff0c\u53ea\u5173\u6ce8\u6bd4\u8f83\u9664 \u590f\u5b63 \u4ee5\u5916\u7684\u6240\u6709\u6708\u4efd</p>"},{"location":"tutorials/python/02_Data%20Analysis/#for","title":"\u4f7f\u7528for\u5faa\u73af\u6765\u52a0\u8f7d\u6240\u6709\u65b9\u6848\u7684\u6587\u4ef6\u00b6","text":"<p>\u591a\u4e2a<code>.csv</code>\u6587\u4ef6\u4e2d\u5305\u542b\u5404\u81ea\u6a21\u62df\u6570\u636e\uff0c\u4f7f\u7528\u4e00\u4e2a<code>for</code>\u5faa\u73af\u6765\u83b7\u53d6\u6bcf\u4e2a\u6570\u636e \u540c\u6837\uff0c\u4f7f\u7528<code>os</code>\u5e93\u6765\u83b7\u53d6\u6587\u4ef6\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u5faa\u73af\u8bfb\u53d6\u6587\u4ef6\u5e76\u722c\u53d6\u5b83\u4eec\u6570\u636e</p>"}]}